############################# General section very likely to be needed by any tests #######################################
[global]
##### failed attempt to not use SNMP and get rid of harmless duplicate entry error messages
enable-snmp=false

##### server list port. Clients will register to the first one of this list
##### in order to run tests in parallel, check in the others config files that the port is not already used
transports=sip:127.0.0.1:5860;transport=tcp

[module::MediaRelay]
##### Media Relay has problem when everyone is running on localhost
# Indicate whether the module is activated.
# Default: true
enabled=false

##### Test using unauthentified accounts on sip.example.org
##
## The ModuleRegistrar module handles REGISTERs for domains it is
## in charge of, and store the address of record in order to allow
## routing requests destinated to the client who registered. REGISTERs
## for other domains are simply ignored and given to the next module.
##
[module::Registrar]

# Indicate whether the module is activated.
# Default: true
enabled=true

# List of whitespace separated domain names which the registar is
# in charge of. It can possibly be the '*' (wildcard) in order
# to match any domain name.
# Default: localhost
reg-domains=sip.example.org sip.company1.com auth.provider1.com sip.provider1.com

max-contacts-per-registration=2

[module::Authentication]
# https://wiki.linphone.org/xwiki/wiki/public/view/Flexisip/Configuration/Authentication/
enabled=true

# Only authenticate the matching requests, other register requests are free to pass unauthenticated.
filter=from.uri.domain contains 'auth.provider1.com'
auth-domains=auth.provider1.com
db-implementation=file
file-path=./flexisip_b2bua.auth

############################# End of - General section very likely to be needed by any tests #######################################


############################# Settings specific to B2bua test suite #################################################################

[Module::B2bua]
# Enable back to back user agent server
# Default: false
enabled=true

##
## Back-to-back User Agent (b2bua) server parameters
## The b2bua answer any call routed to it and make an outgoing call to the original callee
## it allows to get to call legs with different call parameters
## 
[b2bua-server]
# uri where the b2bua server must listen
# Default: sip:127.0.0.1:6067;transport=tcp
transport=sip:127.0.0.1:6067;transport=tcp

# The Flexisip proxy URI to which the B2bua server should sent all its outgoing SIP requests.
outbound-proxy=sip:127.0.0.1:5860;transport=tcp

[b2bua-server::trenscrypter]
## Outgoing call encryption mode:
# Select the call outgoing encryption mode, this is a list of regular expressions and encryption mode.
# valid encryption modes are: zrtp, dtls-srtp, sdes, none.
#
# The list is formatted in the following mode:
# mode1 regex1 mode2 regex2 ... moden regexn
#
# regex use posix syntax, any invalid one is skipped
# Each regex is applied, in the given order, on the callee sip uri. First match found determines the encryption mode
# if no regex matches, the incoming call encryption mode is used
#
# Example: zrtp .*@sip\.secure-example\.org dtsl-srtp .*dtls@sip\.example\.org zrtp .*zrtp@sip\.example\.org sdes .*@sip\.example\.org
# In this example: the address is matched in order with
# .*@sip\.secure-example\.org so any call directed to an address on domain sip.secure-example-org uses zrtp encryption mode
# .*dtls@sip\.example\.org any call on sip.example.org to a username ending with dtls uses dtls-srtp encryption mode
# .*zrtp@sip\.example\.org any call on sip.example.org to a username ending with zrtp uses zrtp encryption mode
#
# Default:
# Selected encryption mode(if any) is enforced and the call will fail if the callee does not support this mode
outgoing-enc-regex=zrtp .*b2bua_zrtp.*@sip\.example\.org(;.*)? sdes .*b2bua_srtp.*@sip\.example\.org(;.*)? dtls-srtp .*b2bua_dtls.*@sip\.example\.org(;.*)?

## Outgoing SRTP crypto suite in SDES encryption mode:
# Select the call outgoing SRTP crypto suite when outgoing encryption mode is SDES, this is a list of regular expressions and crypto suites list.
# valid srtp crypto suites are : 
# AES_CM_128_HMAC_SHA1_80, AES_CM_128_HMAC_SHA1_32
# AES_192_CM_HMAC_SHA1_80, AES_192_CM_HMAC_SHA1_32 // currently not supported
# AES_256_CM_HMAC_SHA1_80, AES_256_CM_HMAC_SHA1_80
# AEAD_AES_128_GCM, AEAD_AES_256_GCM
#
# The list is formatted in the following mode:
# cryptoSuiteList1 regex1 cryptoSuiteList2 regex2 ... crytoSuiteListn regexn
# with cryptoSuiteList being a ; separated list of crypto suites.
#
# regex use posix syntax, any invalid one is skipped
# Each regex is applied, in the given order, on the callee sip uri. First match found determines the crypto suite list used.
#
# if no regex matches, core setting is applied
# or default to AES_CM_128_HMAC_SHA1_80;AES_CM_128_HMAC_SHA1_32;AES_256_CM_HMAC_SHA1_80;AES_256_CM_HMAC_SHA1_32 when no core setting is available
#
# Example:
# AES_256_CM_HMAC_SHA1_80;AES_256_CM_HMAC_SHA1_32 .*@sip\.secure-example\.org(;.*)? AES_CM_128_HMAC_SHA1_80 .*@sip\.example\.org(;.*)?
#
# In this example: the address is matched in order with
# .*@sip\.secure-example\.org so any call directed to an address on domain sip.secure-example-org uses AES_256_CM_HMAC_SHA1_80;AES_256_CM_HMAC_SHA1_32 suites (in that order)
# .*@sip\.example\.org any call directed to an address on domain sip.example.org use AES_CM_128_HMAC_SHA1_80 suite
# Default:
outgoing-srtp-regex=AEAD_AES_256_GCM .*b2bua_srtpgcm.*@sip\.example\.org(;.*)? AES_256_CM_HMAC_SHA1_80;AES_256_CM_HMAC_SHA1_32 .*b2bua_srtp256.*@sip\.example\.org(;.*)? AES_CM_128_HMAC_SHA1_80 .*b2bua_srtp.*@sip\.example\.org(;.*)?

[b2bua-server::sip-bridge]
providers=parse-register-authenticate.json
