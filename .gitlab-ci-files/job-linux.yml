.linux-ccache:

  cache:
    key: $CI_JOB_NAME
    paths:
      - ccache/

  before_script:
    - mkdir -p ccache
    - echo "max_size = $CCACHE_SIZE" > ccache/ccache.conf
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
    - ccache -s
    - git submodule foreach --recursive git fetch --tags

  after_script:
    - export CCACHE_DIR=${PWD}/ccache
    - ccache -s

.job-linux:

  stage: build
  extends: .linux-ccache

  script:
    - export CC=$CC
    - export CXX=$CXX
    - ./prepare.py -G "$CMAKE_GENERATOR" -cc $DEFAULT_CMAKE_OPTIONS $CMAKE_OPTIONS
    - cmake --build WORK/flexisip/cmake -- $ADDITIONAL_BUILD_OPTIONS

#################################################
# RPM
#################################################

.job-linux-rpm:

  stage: package
  except:
    variables:
      - $DEPLOY_UBUNTU

  script:
    - sudo rpm -e `rpm -qa | grep "^bc-[^0-9]"` || true
    - ./prepare.py flexisip-rpm $DEFAULT_CMAKE_OPTIONS $CMAKE_OPTIONS
    - cmake --build WORK/flexisip-rpm/cmake -- $ADDITIONAL_BUILD_OPTIONS

  artifacts:
    paths:
      - WORK/flexisip-rpm/rpmbuild/RPMS/x86_64/*.rpm
    when: always
    expire_in: 1 week

#################################################
# DEB
#################################################

.job-linux-deb:

  stage: package

  script:
    - sudo apt-get -y remove `dpkg-query -f '${binary:Package}\n' -W | grep "^bc-"` || true
    - ./prepare.py flexisip-rpm $DEFAULT_CMAKE_OPTIONS $CMAKE_OPTIONS
    - make

  artifacts:
    paths:
      - WORK/flexisip-rpm/rpmbuild/DEBS/*.deb
    when: always
    expire_in: 1 week

.job-deploy:
  only:
    refs: ['master', 'release/*']
    variables: [$SCHEDULE_RUN]

.job-debian-deb-deploy:

  stage: deploy
  tags: [ "deploy" ]

  extends: .job-deploy

  script: ./.gitlab-ci-files/deploy.sh debian

#################################################
# DOCKER
#################################################

.job-flexisip-image-deploy:

  stage: image
  tags: [ "linux-deploy" ]
  except:
    variables:
      - $DEPLOY_RUN
      - $DEPLOY_UBUNTU
  only:
    - schedules

  script:
    - mv WORK/flexisip-rpm/rpmbuild/DEBS docker/DEBS
    - cd docker
    - make flexisip-deb-build
    - make flexisip-deb-push

#################################################
# Schedule
#################################################

.scheduled-job-linux:

  extends: .job-linux
  only:
    - schedules

tests-flexisip-mr:
  stage: test
  tags: [ "linux-nuc"]
  except:
    variables:
      - $DEPLOY_RUN
      - $DEPLOY_UBUNTU

  variables:
    #Build a new Flexisip Docker image from the last published RPM package.
    REBUILD_FLEXISIP_IMAGE: "true"
    #Rebuild docker images of services which Flexisip needs to work: user database, redis server, etc.
    REBUILD_FLEXISIP_AUXILIARIES: "false"
    #Set this option to true each time you change the commit to checkout for linphone-sdk, otherwise, the SDK is never rebuild.
    REBUILD_SDK: "true"
    SDK_VERSION: "4.3"
    #Git branch to use to build the liblinphone_tester image. "release/${SDK_VERSION}" will be used as branch if empty.
    #SDK_BRANCH
    #Run test suites simultaneously.
    PARALLEL_MODE: "false"
    DOCKER_BUILD_OPTIONS: "--no-cache --force-rm -t flexisip:latest -f docker/Dockerfile"

  before_script:
    ##
    ## If a FLEXISIP_TESTER_USER_KEY is defined then start ssh-agent and add the key
    ##
    #- if ! [ -z ${FLEXISIP_TESTER_USER_KEY+x} ]; then eval $(ssh-agent -s); fi
    #- if ! [ -z ${FLEXISIP_TESTER_USER_KEY+x} ]; then echo "$FLEXISIP_TESTER_USER_KEY" | tr -d '\r' | ssh-add - > /dev/null; fi
    #- if ! [ -z ${FLEXISIP_TESTER_USER_KEY+x} ]; then mkdir -p ~/.ssh && chmod 700 ~/.ssh; fi
    #- if ! [ -z ${FLEXISIP_TESTER_USER_KEY+x} ]; then echo -e "Host gitlab.linphone.org\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config; fi


  script:
    - git clone -b feature/docker_liblinphone_tester --single-branch https://gitlab.linphone.org/BC/Public/linphone-sdk --recursive --jobs 12 linphone-sdk-docker
    - git clone -b conf/standalone-flexisip --single-branch git@gitlab.linphone.org:BC/Public/flexisip-tester --jobs 12
    - |
        if [ "$REBUILD_FLEXISIP_IMAGE" = "true" ]; then
        docker build $DOCKER_BUILD_OPTIONS .
        fi
    - sourcedir=$PWD/linphone-sdk-docker
    - |
        if [ -z "$SDK_BRANCH" ]; then
        SDK_BRANCH="release/$SDK_VERSION"
        fi

    - |
        if [ "$REBUILD_SDK" = "true" ]; then
        docker build --no-cache --force-rm -t liblinphone_tester:$SDK_VERSION --build-arg="branch=$SDK_BRANCH" -f "$sourcedir/docker-files/liblinphone-tester" .
        fi

    - |
        docker_compose_options=''
        for name in 'docker-compose.yaml' 'docker-compose-standalone.yaml'; do
        docker_compose_options="$docker_compose_options -f $PWD/flexisip-tester/docker/$name"
        done

    - liblinphone_tester="liblinphone_tester:$SDK_VERSION"

    - liblinphone_tester_options='--dns-hosts none --log-file liblinphone_tester.log --xml --verbose --show-account-manager-logs'

    - |
        if [ "$PARALLEL_MODE" = "true" ]; then
        liblinphone_tester_options="$liblinphone_tester_options --parallel"
        fi

    - |
        workspace="$PWD/liblinphone_tester_workspace"
        export FLEXISIP_LOGS="$workspace"

    - docker_run_options="--volume=$workspace:/home/bc/linphone-sdk-build/linphone-sdk/desktop/work --network=docker_default"
    - docker_run_options="$docker_run_options --device=/dev/snd --user 1000:29"

    - mkdir -p $workspace
    - rm -rf $workspace/*
    - cd $workspace

    - docker-compose $docker_compose_options down
    - |
        if [ "$REBUILD_FLEXISIP_AUXILIARIES" = "true" ]; then
        docker-compose $docker_compose_options build
        fi

    - docker-compose $docker_compose_options up -d

    - sleep 10

    - docker run $docker_run_options $liblinphone_tester $liblinphone_tester_options || echo 'Tests have failed'
    - docker-compose $docker_compose_options stop

    - gzip *.log

    - tree

  after_script:

    - cd ${CI_PROJECT_DIR}/liblinphone_tester_workspace
    #.gdbinit is used to store gdb init scripts
    #we use it to avoid the need to specify manually the commands for each potential coredump
    - echo "thread apply all bt" | tee .gdbinit
    #We need to add this command in two .gdbinit files, one in the current directory and the other in the home directory, for gdb to pick the above command.
    - echo add-auto-load-safe-path $PWD/.gdbinit | tee -a /home/bc/.gdbinit
    # searching for core files and if there are some, launch gdb on all of it
    # xargs -L1 means that the command in argument will be executed for each line (core dump) found in find output
    # "true ||" is used here to continue the script even if the find fails
    - if [[ -n $(find . -type f -name "core*") ]]; then find . -type f -name "core*" | xargs -L1 gdb $TESTER_BIN; fi || true

    # simplifing artifacts browsing
    # Moving artifacts to ease browsing from web view
    # initially, all the paths needed to be browsed entirely to see artifacts
    # now there is only the folder "results" to check
    - mkdir ${CI_PROJECT_DIR}/results
    - chmod 777 ${CI_PROJECT_DIR}/results
    - cp -r BCUnitAutomated* ${CI_PROJECT_DIR}/results
    - cp -r *.log.gz ${CI_PROJECT_DIR}/results

  artifacts:
    paths:
      - results/*
    when: always
    reports:
      junit:
        - liblinphone_tester_workspace/BCUnitAutomated-Results.xml
    expire_in: 4 week
    #cloner flexisip_tester (branche conf/standalone_flexisip) ainsi que linphone-sdk (branche feature/docker_liblinphone_tester) avec update recursif des sous-modules

    #penser aussi Ã  l'upload des rapports de test.
