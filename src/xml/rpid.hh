// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XML_RPID_HH
#define XML_RPID_HH

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
#if __clang__ || __GNUC__ >= 4
	#pragma GCC diagnostic push
	#pragma GCC diagnostic ignored "-Wfloat-equal"
	#pragma GCC diagnostic ignored "-Wimplicit-fallthrough"
#ifndef __ANDROID__
	#pragma GCC diagnostic ignored "-Wsuggest-override"
#endif
#endif
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

namespace flexisip
{
  namespace Xsd
  {
    namespace XmlSchema
    {
      // anyType and anySimpleType.
      //
      typedef ::xsd::cxx::tree::type Type;
      typedef ::xsd::cxx::tree::simple_type< char, Type > SimpleType;
      typedef ::xsd::cxx::tree::type Container;

      // 8-bit
      //
      typedef signed char Byte;
      typedef unsigned char UnsignedByte;

      // 16-bit
      //
      typedef short Short;
      typedef unsigned short UnsignedShort;

      // 32-bit
      //
      typedef int Int;
      typedef unsigned int UnsignedInt;

      // 64-bit
      //
      typedef long long Long;
      typedef unsigned long long UnsignedLong;

      // Supposed to be arbitrary-length integral types.
      //
      typedef long long Integer;
      typedef long long NonPositiveInteger;
      typedef unsigned long long NonNegativeInteger;
      typedef unsigned long long PositiveInteger;
      typedef long long NegativeInteger;

      // Boolean.
      //
      typedef bool Boolean;

      // Floating-point types.
      //
      typedef float Float;
      typedef double Double;
      typedef double Decimal;

      // String types.
      //
      typedef ::xsd::cxx::tree::string< char, SimpleType > String;
      typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;
      typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;
      typedef ::xsd::cxx::tree::name< char, Token > Name;
      typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;
      typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;
      typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;
      typedef ::xsd::cxx::tree::language< char, Token > Language;

      // ID/IDREF.
      //
      typedef ::xsd::cxx::tree::id< char, Ncname > Id;
      typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;
      typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;

      // URI.
      //
      typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;

      // Qualified name.
      //
      typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;

      // Binary.
      //
      typedef ::xsd::cxx::tree::buffer< char > Buffer;
      typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;
      typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;

      // Date/time.
      //
      typedef ::xsd::cxx::tree::time_zone TimeZone;
      typedef ::xsd::cxx::tree::date< char, SimpleType > Date;
      typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;
      typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;
      typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;
      typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;
      typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;
      typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;
      typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;
      typedef ::xsd::cxx::tree::time< char, SimpleType > Time;

      // Entity.
      //
      typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;
      typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;

      typedef ::xsd::cxx::tree::content_order ContentOrder;
      // Namespace information and list stream. Used in
      // serialization functions.
      //
      typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;
      typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;
      typedef ::xsd::cxx::tree::list_stream< char > ListStream;
      typedef ::xsd::cxx::tree::as_double< Double > AsDouble;
      typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;
      typedef ::xsd::cxx::tree::facet Facet;

      // Flags and properties.
      //
      typedef ::xsd::cxx::tree::flags Flags;
      typedef ::xsd::cxx::tree::properties< char > Properties;

      // Parsing/serialization diagnostics.
      //
      typedef ::xsd::cxx::tree::severity Severity;
      typedef ::xsd::cxx::tree::error< char > Error;
      typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

      // Exceptions.
      //
      typedef ::xsd::cxx::tree::exception< char > Exception;
      typedef ::xsd::cxx::tree::bounds< char > Bounds;
      typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;
      typedef ::xsd::cxx::tree::parsing< char > Parsing;
      typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;
      typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;
      typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;
      typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;
      typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;
      typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;
      typedef ::xsd::cxx::tree::serialization< char > Serialization;

      // Error handler callback interface.
      //
      typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

      // DOM interaction.
      //
      namespace dom
      {
        // Automatic pointer for DOMDocument.
        //
        using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__FLEXISIP__XSD__XMLSCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__FLEXISIP__XSD__XMLSCHEMA
        // DOM user data key for back pointers to tree nodes.
        //
        const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
      }
    }
  }
}

// Forward declarations.
//
namespace flexisip
{
  namespace Xsd
  {
    namespace Rpid
    {
      class Timestamp_t;
      class DeviceID_t;
      class Note_t;
      class Empty;
    }
  }
}

namespace flexisip
{
  namespace Xsd
  {
    namespace Rpid
    {
      class ActiveIdle;
      class Activities;
      class Mood;
      class PlaceIs;
      class PlaceType;
      class Privacy;
      class Relationship;
      class ServiceClass;
      class Sphere;
      class StatusIcon;
      class TimeOffset;
      class UserInput;
      class Audio;
      class Video;
      class Text;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

#include "xml.hh"

namespace flexisip
{
  namespace Xsd
  {
    namespace Rpid
    {
      class Timestamp_t: public ::flexisip::Xsd::XmlSchema::DateTime
      {
        public:
        // Constructors.
        //
        Timestamp_t (const ::flexisip::Xsd::XmlSchema::DateTime&);

        Timestamp_t (const ::xercesc::DOMElement& e,
                     ::flexisip::Xsd::XmlSchema::Flags f = 0,
                     ::flexisip::Xsd::XmlSchema::Container* c = 0);

        Timestamp_t (const ::xercesc::DOMAttr& a,
                     ::flexisip::Xsd::XmlSchema::Flags f = 0,
                     ::flexisip::Xsd::XmlSchema::Container* c = 0);

        Timestamp_t (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::flexisip::Xsd::XmlSchema::Flags f = 0,
                     ::flexisip::Xsd::XmlSchema::Container* c = 0);

        Timestamp_t (const Timestamp_t& x,
                     ::flexisip::Xsd::XmlSchema::Flags f = 0,
                     ::flexisip::Xsd::XmlSchema::Container* c = 0);

        virtual Timestamp_t*
        _clone (::flexisip::Xsd::XmlSchema::Flags f = 0,
                ::flexisip::Xsd::XmlSchema::Container* c = 0) const;

        virtual 
        ~Timestamp_t ();
      };

      class DeviceID_t: public ::flexisip::Xsd::XmlSchema::Uri
      {
        public:
        // Constructors.
        //
        DeviceID_t (const ::flexisip::Xsd::XmlSchema::Uri&);

        DeviceID_t (const ::xercesc::DOMElement& e,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    ::flexisip::Xsd::XmlSchema::Container* c = 0);

        DeviceID_t (const ::xercesc::DOMAttr& a,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    ::flexisip::Xsd::XmlSchema::Container* c = 0);

        DeviceID_t (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    ::flexisip::Xsd::XmlSchema::Container* c = 0);

        DeviceID_t (const DeviceID_t& x,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    ::flexisip::Xsd::XmlSchema::Container* c = 0);

        virtual DeviceID_t*
        _clone (::flexisip::Xsd::XmlSchema::Flags f = 0,
                ::flexisip::Xsd::XmlSchema::Container* c = 0) const;

        virtual 
        ~DeviceID_t ();
      };

      class Note_t: public ::flexisip::Xsd::XmlSchema::String
      {
        public:
        // lang
        //
        typedef ::flexisip::Xsd::Namespace::Lang LangType;
        typedef ::xsd::cxx::tree::optional< LangType > LangOptional;
        typedef ::xsd::cxx::tree::traits< LangType, char > LangTraits;

        const LangOptional&
        getLang () const;

        LangOptional&
        getLang ();

        void
        setLang (const LangType& x);

        void
        setLang (const LangOptional& x);

        void
        setLang (::std::unique_ptr< LangType > p);

        // Constructors.
        //
        Note_t ();

        Note_t (const char*);

        Note_t (const ::std::string&);

        Note_t (const ::flexisip::Xsd::XmlSchema::String&);

        Note_t (const ::xercesc::DOMElement& e,
                ::flexisip::Xsd::XmlSchema::Flags f = 0,
                ::flexisip::Xsd::XmlSchema::Container* c = 0);

        Note_t (const Note_t& x,
                ::flexisip::Xsd::XmlSchema::Flags f = 0,
                ::flexisip::Xsd::XmlSchema::Container* c = 0);

        virtual Note_t*
        _clone (::flexisip::Xsd::XmlSchema::Flags f = 0,
                ::flexisip::Xsd::XmlSchema::Container* c = 0) const;

        Note_t&
        operator= (const Note_t& x);

        virtual 
        ~Note_t ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::flexisip::Xsd::XmlSchema::Flags);

        protected:
        LangOptional lang_;
      };

      class Empty: public ::flexisip::Xsd::XmlSchema::Type
      {
        public:
        // Constructors.
        //
        Empty ();

        Empty (const ::xercesc::DOMElement& e,
               ::flexisip::Xsd::XmlSchema::Flags f = 0,
               ::flexisip::Xsd::XmlSchema::Container* c = 0);

        Empty (const ::xercesc::DOMAttr& a,
               ::flexisip::Xsd::XmlSchema::Flags f = 0,
               ::flexisip::Xsd::XmlSchema::Container* c = 0);

        Empty (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::flexisip::Xsd::XmlSchema::Flags f = 0,
               ::flexisip::Xsd::XmlSchema::Container* c = 0);

        Empty (const Empty& x,
               ::flexisip::Xsd::XmlSchema::Flags f = 0,
               ::flexisip::Xsd::XmlSchema::Container* c = 0);

        virtual Empty*
        _clone (::flexisip::Xsd::XmlSchema::Flags f = 0,
                ::flexisip::Xsd::XmlSchema::Container* c = 0) const;

        virtual 
        ~Empty ();
      };
    }
  }
}

namespace flexisip
{
  namespace Xsd
  {
    namespace Rpid
    {
      class ActiveIdle: public ::flexisip::Xsd::XmlSchema::String
      {
        public:
        enum Value
        {
          active,
          idle
        };

        ActiveIdle (Value v);

        ActiveIdle (const char* v);

        ActiveIdle (const ::std::string& v);

        ActiveIdle (const ::flexisip::Xsd::XmlSchema::String& v);

        ActiveIdle (const ::xercesc::DOMElement& e,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    ::flexisip::Xsd::XmlSchema::Container* c = 0);

        ActiveIdle (const ::xercesc::DOMAttr& a,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    ::flexisip::Xsd::XmlSchema::Container* c = 0);

        ActiveIdle (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    ::flexisip::Xsd::XmlSchema::Container* c = 0);

        ActiveIdle (const ActiveIdle& x,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    ::flexisip::Xsd::XmlSchema::Container* c = 0);

        virtual ActiveIdle*
        _clone (::flexisip::Xsd::XmlSchema::Flags f = 0,
                ::flexisip::Xsd::XmlSchema::Container* c = 0) const;

        ActiveIdle&
        operator= (Value v);

        virtual
        operator Value () const
        {
          return _xsd_ActiveIdle_convert ();
        }

        protected:
        Value
        _xsd_ActiveIdle_convert () const;

        public:
        static const char* const _xsd_ActiveIdle_literals_[2];
        static const Value _xsd_ActiveIdle_indexes_[2];
      };

      class Activities: public ::flexisip::Xsd::XmlSchema::Type
      {
        public:
        // note
        //
        typedef ::flexisip::Xsd::Rpid::Note_t NoteType;
        typedef ::xsd::cxx::tree::sequence< NoteType > NoteSequence;
        typedef NoteSequence::iterator NoteIterator;
        typedef NoteSequence::const_iterator NoteConstIterator;
        typedef ::xsd::cxx::tree::traits< NoteType, char > NoteTraits;

        const NoteSequence&
        getNote () const;

        NoteSequence&
        getNote ();

        void
        setNote (const NoteSequence& s);

        // unknown
        //
        typedef ::flexisip::Xsd::Rpid::Empty UnknownType;
        typedef ::xsd::cxx::tree::optional< UnknownType > UnknownOptional;
        typedef ::xsd::cxx::tree::traits< UnknownType, char > UnknownTraits;

        const UnknownOptional&
        getUnknown () const;

        UnknownOptional&
        getUnknown ();

        void
        setUnknown (const UnknownType& x);

        void
        setUnknown (const UnknownOptional& x);

        void
        setUnknown (::std::unique_ptr< UnknownType > p);

        // appointment
        //
        typedef ::flexisip::Xsd::Rpid::Empty AppointmentType;
        typedef ::xsd::cxx::tree::sequence< AppointmentType > AppointmentSequence;
        typedef AppointmentSequence::iterator AppointmentIterator;
        typedef AppointmentSequence::const_iterator AppointmentConstIterator;
        typedef ::xsd::cxx::tree::traits< AppointmentType, char > AppointmentTraits;

        const AppointmentSequence&
        getAppointment () const;

        AppointmentSequence&
        getAppointment ();

        void
        setAppointment (const AppointmentSequence& s);

        // away
        //
        typedef ::flexisip::Xsd::Rpid::Empty AwayType;
        typedef ::xsd::cxx::tree::sequence< AwayType > AwaySequence;
        typedef AwaySequence::iterator AwayIterator;
        typedef AwaySequence::const_iterator AwayConstIterator;
        typedef ::xsd::cxx::tree::traits< AwayType, char > AwayTraits;

        const AwaySequence&
        getAway () const;

        AwaySequence&
        getAway ();

        void
        setAway (const AwaySequence& s);

        // breakfast
        //
        typedef ::flexisip::Xsd::Rpid::Empty BreakfastType;
        typedef ::xsd::cxx::tree::sequence< BreakfastType > BreakfastSequence;
        typedef BreakfastSequence::iterator BreakfastIterator;
        typedef BreakfastSequence::const_iterator BreakfastConstIterator;
        typedef ::xsd::cxx::tree::traits< BreakfastType, char > BreakfastTraits;

        const BreakfastSequence&
        getBreakfast () const;

        BreakfastSequence&
        getBreakfast ();

        void
        setBreakfast (const BreakfastSequence& s);

        // busy
        //
        typedef ::flexisip::Xsd::Rpid::Empty BusyType;
        typedef ::xsd::cxx::tree::sequence< BusyType > BusySequence;
        typedef BusySequence::iterator BusyIterator;
        typedef BusySequence::const_iterator BusyConstIterator;
        typedef ::xsd::cxx::tree::traits< BusyType, char > BusyTraits;

        const BusySequence&
        getBusy () const;

        BusySequence&
        getBusy ();

        void
        setBusy (const BusySequence& s);

        // dinner
        //
        typedef ::flexisip::Xsd::Rpid::Empty DinnerType;
        typedef ::xsd::cxx::tree::sequence< DinnerType > DinnerSequence;
        typedef DinnerSequence::iterator DinnerIterator;
        typedef DinnerSequence::const_iterator DinnerConstIterator;
        typedef ::xsd::cxx::tree::traits< DinnerType, char > DinnerTraits;

        const DinnerSequence&
        getDinner () const;

        DinnerSequence&
        getDinner ();

        void
        setDinner (const DinnerSequence& s);

        // holiday
        //
        typedef ::flexisip::Xsd::Rpid::Empty HolidayType;
        typedef ::xsd::cxx::tree::sequence< HolidayType > HolidaySequence;
        typedef HolidaySequence::iterator HolidayIterator;
        typedef HolidaySequence::const_iterator HolidayConstIterator;
        typedef ::xsd::cxx::tree::traits< HolidayType, char > HolidayTraits;

        const HolidaySequence&
        getHoliday () const;

        HolidaySequence&
        getHoliday ();

        void
        setHoliday (const HolidaySequence& s);

        // in-transit
        //
        typedef ::flexisip::Xsd::Rpid::Empty InTransitType;
        typedef ::xsd::cxx::tree::sequence< InTransitType > InTransitSequence;
        typedef InTransitSequence::iterator InTransitIterator;
        typedef InTransitSequence::const_iterator InTransitConstIterator;
        typedef ::xsd::cxx::tree::traits< InTransitType, char > InTransitTraits;

        const InTransitSequence&
        getInTransit () const;

        InTransitSequence&
        getInTransit ();

        void
        setInTransit (const InTransitSequence& s);

        // looking-for-work
        //
        typedef ::flexisip::Xsd::Rpid::Empty LookingForWorkType;
        typedef ::xsd::cxx::tree::sequence< LookingForWorkType > LookingForWorkSequence;
        typedef LookingForWorkSequence::iterator LookingForWorkIterator;
        typedef LookingForWorkSequence::const_iterator LookingForWorkConstIterator;
        typedef ::xsd::cxx::tree::traits< LookingForWorkType, char > LookingForWorkTraits;

        const LookingForWorkSequence&
        getLookingForWork () const;

        LookingForWorkSequence&
        getLookingForWork ();

        void
        setLookingForWork (const LookingForWorkSequence& s);

        // meal
        //
        typedef ::flexisip::Xsd::Rpid::Empty MealType;
        typedef ::xsd::cxx::tree::sequence< MealType > MealSequence;
        typedef MealSequence::iterator MealIterator;
        typedef MealSequence::const_iterator MealConstIterator;
        typedef ::xsd::cxx::tree::traits< MealType, char > MealTraits;

        const MealSequence&
        getMeal () const;

        MealSequence&
        getMeal ();

        void
        setMeal (const MealSequence& s);

        // meeting
        //
        typedef ::flexisip::Xsd::Rpid::Empty MeetingType;
        typedef ::xsd::cxx::tree::sequence< MeetingType > MeetingSequence;
        typedef MeetingSequence::iterator MeetingIterator;
        typedef MeetingSequence::const_iterator MeetingConstIterator;
        typedef ::xsd::cxx::tree::traits< MeetingType, char > MeetingTraits;

        const MeetingSequence&
        getMeeting () const;

        MeetingSequence&
        getMeeting ();

        void
        setMeeting (const MeetingSequence& s);

        // on-the-phone
        //
        typedef ::flexisip::Xsd::Rpid::Empty OnThePhoneType;
        typedef ::xsd::cxx::tree::sequence< OnThePhoneType > OnThePhoneSequence;
        typedef OnThePhoneSequence::iterator OnThePhoneIterator;
        typedef OnThePhoneSequence::const_iterator OnThePhoneConstIterator;
        typedef ::xsd::cxx::tree::traits< OnThePhoneType, char > OnThePhoneTraits;

        const OnThePhoneSequence&
        getOnThePhone () const;

        OnThePhoneSequence&
        getOnThePhone ();

        void
        setOnThePhone (const OnThePhoneSequence& s);

        // performance
        //
        typedef ::flexisip::Xsd::Rpid::Empty PerformanceType;
        typedef ::xsd::cxx::tree::sequence< PerformanceType > PerformanceSequence;
        typedef PerformanceSequence::iterator PerformanceIterator;
        typedef PerformanceSequence::const_iterator PerformanceConstIterator;
        typedef ::xsd::cxx::tree::traits< PerformanceType, char > PerformanceTraits;

        const PerformanceSequence&
        getPerformance () const;

        PerformanceSequence&
        getPerformance ();

        void
        setPerformance (const PerformanceSequence& s);

        // permanent-absence
        //
        typedef ::flexisip::Xsd::Rpid::Empty PermanentAbsenceType;
        typedef ::xsd::cxx::tree::sequence< PermanentAbsenceType > PermanentAbsenceSequence;
        typedef PermanentAbsenceSequence::iterator PermanentAbsenceIterator;
        typedef PermanentAbsenceSequence::const_iterator PermanentAbsenceConstIterator;
        typedef ::xsd::cxx::tree::traits< PermanentAbsenceType, char > PermanentAbsenceTraits;

        const PermanentAbsenceSequence&
        getPermanentAbsence () const;

        PermanentAbsenceSequence&
        getPermanentAbsence ();

        void
        setPermanentAbsence (const PermanentAbsenceSequence& s);

        // playing
        //
        typedef ::flexisip::Xsd::Rpid::Empty PlayingType;
        typedef ::xsd::cxx::tree::sequence< PlayingType > PlayingSequence;
        typedef PlayingSequence::iterator PlayingIterator;
        typedef PlayingSequence::const_iterator PlayingConstIterator;
        typedef ::xsd::cxx::tree::traits< PlayingType, char > PlayingTraits;

        const PlayingSequence&
        getPlaying () const;

        PlayingSequence&
        getPlaying ();

        void
        setPlaying (const PlayingSequence& s);

        // presentation
        //
        typedef ::flexisip::Xsd::Rpid::Empty PresentationType;
        typedef ::xsd::cxx::tree::sequence< PresentationType > PresentationSequence;
        typedef PresentationSequence::iterator PresentationIterator;
        typedef PresentationSequence::const_iterator PresentationConstIterator;
        typedef ::xsd::cxx::tree::traits< PresentationType, char > PresentationTraits;

        const PresentationSequence&
        getPresentation () const;

        PresentationSequence&
        getPresentation ();

        void
        setPresentation (const PresentationSequence& s);

        // shopping
        //
        typedef ::flexisip::Xsd::Rpid::Empty ShoppingType;
        typedef ::xsd::cxx::tree::sequence< ShoppingType > ShoppingSequence;
        typedef ShoppingSequence::iterator ShoppingIterator;
        typedef ShoppingSequence::const_iterator ShoppingConstIterator;
        typedef ::xsd::cxx::tree::traits< ShoppingType, char > ShoppingTraits;

        const ShoppingSequence&
        getShopping () const;

        ShoppingSequence&
        getShopping ();

        void
        setShopping (const ShoppingSequence& s);

        // sleeping
        //
        typedef ::flexisip::Xsd::Rpid::Empty SleepingType;
        typedef ::xsd::cxx::tree::sequence< SleepingType > SleepingSequence;
        typedef SleepingSequence::iterator SleepingIterator;
        typedef SleepingSequence::const_iterator SleepingConstIterator;
        typedef ::xsd::cxx::tree::traits< SleepingType, char > SleepingTraits;

        const SleepingSequence&
        getSleeping () const;

        SleepingSequence&
        getSleeping ();

        void
        setSleeping (const SleepingSequence& s);

        // spectator
        //
        typedef ::flexisip::Xsd::Rpid::Empty SpectatorType;
        typedef ::xsd::cxx::tree::sequence< SpectatorType > SpectatorSequence;
        typedef SpectatorSequence::iterator SpectatorIterator;
        typedef SpectatorSequence::const_iterator SpectatorConstIterator;
        typedef ::xsd::cxx::tree::traits< SpectatorType, char > SpectatorTraits;

        const SpectatorSequence&
        getSpectator () const;

        SpectatorSequence&
        getSpectator ();

        void
        setSpectator (const SpectatorSequence& s);

        // steering
        //
        typedef ::flexisip::Xsd::Rpid::Empty SteeringType;
        typedef ::xsd::cxx::tree::sequence< SteeringType > SteeringSequence;
        typedef SteeringSequence::iterator SteeringIterator;
        typedef SteeringSequence::const_iterator SteeringConstIterator;
        typedef ::xsd::cxx::tree::traits< SteeringType, char > SteeringTraits;

        const SteeringSequence&
        getSteering () const;

        SteeringSequence&
        getSteering ();

        void
        setSteering (const SteeringSequence& s);

        // travel
        //
        typedef ::flexisip::Xsd::Rpid::Empty TravelType;
        typedef ::xsd::cxx::tree::sequence< TravelType > TravelSequence;
        typedef TravelSequence::iterator TravelIterator;
        typedef TravelSequence::const_iterator TravelConstIterator;
        typedef ::xsd::cxx::tree::traits< TravelType, char > TravelTraits;

        const TravelSequence&
        getTravel () const;

        TravelSequence&
        getTravel ();

        void
        setTravel (const TravelSequence& s);

        // tv
        //
        typedef ::flexisip::Xsd::Rpid::Empty TvType;
        typedef ::xsd::cxx::tree::sequence< TvType > TvSequence;
        typedef TvSequence::iterator TvIterator;
        typedef TvSequence::const_iterator TvConstIterator;
        typedef ::xsd::cxx::tree::traits< TvType, char > TvTraits;

        const TvSequence&
        getTv () const;

        TvSequence&
        getTv ();

        void
        setTv (const TvSequence& s);

        // vacation
        //
        typedef ::flexisip::Xsd::Rpid::Empty VacationType;
        typedef ::xsd::cxx::tree::sequence< VacationType > VacationSequence;
        typedef VacationSequence::iterator VacationIterator;
        typedef VacationSequence::const_iterator VacationConstIterator;
        typedef ::xsd::cxx::tree::traits< VacationType, char > VacationTraits;

        const VacationSequence&
        getVacation () const;

        VacationSequence&
        getVacation ();

        void
        setVacation (const VacationSequence& s);

        // working
        //
        typedef ::flexisip::Xsd::Rpid::Empty WorkingType;
        typedef ::xsd::cxx::tree::sequence< WorkingType > WorkingSequence;
        typedef WorkingSequence::iterator WorkingIterator;
        typedef WorkingSequence::const_iterator WorkingConstIterator;
        typedef ::xsd::cxx::tree::traits< WorkingType, char > WorkingTraits;

        const WorkingSequence&
        getWorking () const;

        WorkingSequence&
        getWorking ();

        void
        setWorking (const WorkingSequence& s);

        // worship
        //
        typedef ::flexisip::Xsd::Rpid::Empty WorshipType;
        typedef ::xsd::cxx::tree::sequence< WorshipType > WorshipSequence;
        typedef WorshipSequence::iterator WorshipIterator;
        typedef WorshipSequence::const_iterator WorshipConstIterator;
        typedef ::xsd::cxx::tree::traits< WorshipType, char > WorshipTraits;

        const WorshipSequence&
        getWorship () const;

        WorshipSequence&
        getWorship ();

        void
        setWorship (const WorshipSequence& s);

        // other
        //
        typedef ::flexisip::Xsd::Rpid::Note_t OtherType;
        typedef ::xsd::cxx::tree::sequence< OtherType > OtherSequence;
        typedef OtherSequence::iterator OtherIterator;
        typedef OtherSequence::const_iterator OtherConstIterator;
        typedef ::xsd::cxx::tree::traits< OtherType, char > OtherTraits;

        const OtherSequence&
        getOther () const;

        OtherSequence&
        getOther ();

        void
        setOther (const OtherSequence& s);

        // any
        //
        typedef ::xsd::cxx::tree::element_sequence AnySequence;
        typedef AnySequence::iterator AnyIterator;
        typedef AnySequence::const_iterator AnyConstIterator;

        const AnySequence&
        getAny () const;

        AnySequence&
        getAny ();

        void
        setAny (const AnySequence& s);

        // from
        //
        typedef ::flexisip::Xsd::XmlSchema::DateTime FromType;
        typedef ::xsd::cxx::tree::optional< FromType > FromOptional;
        typedef ::xsd::cxx::tree::traits< FromType, char > FromTraits;

        const FromOptional&
        getFrom () const;

        FromOptional&
        getFrom ();

        void
        setFrom (const FromType& x);

        void
        setFrom (const FromOptional& x);

        void
        setFrom (::std::unique_ptr< FromType > p);

        // until
        //
        typedef ::flexisip::Xsd::XmlSchema::DateTime UntilType;
        typedef ::xsd::cxx::tree::optional< UntilType > UntilOptional;
        typedef ::xsd::cxx::tree::traits< UntilType, char > UntilTraits;

        const UntilOptional&
        getUntil () const;

        UntilOptional&
        getUntil ();

        void
        setUntil (const UntilType& x);

        void
        setUntil (const UntilOptional& x);

        void
        setUntil (::std::unique_ptr< UntilType > p);

        // id
        //
        typedef ::flexisip::Xsd::XmlSchema::Id IdType;
        typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
        typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

        const IdOptional&
        getId () const;

        IdOptional&
        getId ();

        void
        setId (const IdType& x);

        void
        setId (const IdOptional& x);

        void
        setId (::std::unique_ptr< IdType > p);

        // any_attribute
        //
        typedef ::xsd::cxx::tree::attribute_set< char > AnyAttributeSet;
        typedef AnyAttributeSet::iterator AnyAttributeIterator;
        typedef AnyAttributeSet::const_iterator AnyAttributeConstIterator;

        const AnyAttributeSet&
        getAnyAttribute () const;

        AnyAttributeSet&
        getAnyAttribute ();

        void
        setAnyAttribute (const AnyAttributeSet& s);

        // DOMDocument for wildcard content.
        //
        const ::xercesc::DOMDocument&
        getDomDocument () const;

        ::xercesc::DOMDocument&
        getDomDocument ();

        // Constructors.
        //
        Activities ();

        Activities (const ::xercesc::DOMElement& e,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    ::flexisip::Xsd::XmlSchema::Container* c = 0);

        Activities (const Activities& x,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    ::flexisip::Xsd::XmlSchema::Container* c = 0);

        virtual Activities*
        _clone (::flexisip::Xsd::XmlSchema::Flags f = 0,
                ::flexisip::Xsd::XmlSchema::Container* c = 0) const;

        Activities&
        operator= (const Activities& x);

        virtual 
        ~Activities ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::flexisip::Xsd::XmlSchema::Flags);

        protected:
        ::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument > dom_document_;

        NoteSequence note_;
        UnknownOptional unknown_;
        AppointmentSequence appointment_;
        AwaySequence away_;
        BreakfastSequence breakfast_;
        BusySequence busy_;
        DinnerSequence dinner_;
        HolidaySequence holiday_;
        InTransitSequence in_transit_;
        LookingForWorkSequence looking_for_work_;
        MealSequence meal_;
        MeetingSequence meeting_;
        OnThePhoneSequence on_the_phone_;
        PerformanceSequence performance_;
        PermanentAbsenceSequence permanent_absence_;
        PlayingSequence playing_;
        PresentationSequence presentation_;
        ShoppingSequence shopping_;
        SleepingSequence sleeping_;
        SpectatorSequence spectator_;
        SteeringSequence steering_;
        TravelSequence travel_;
        TvSequence tv_;
        VacationSequence vacation_;
        WorkingSequence working_;
        WorshipSequence worship_;
        OtherSequence other_;
        AnySequence any_;
        FromOptional from_;
        UntilOptional until_;
        IdOptional id_;
        AnyAttributeSet any_attribute_;
      };

      class Mood: public ::flexisip::Xsd::XmlSchema::Type
      {
        public:
        // note
        //
        typedef ::flexisip::Xsd::Rpid::Note_t NoteType;
        typedef ::xsd::cxx::tree::sequence< NoteType > NoteSequence;
        typedef NoteSequence::iterator NoteIterator;
        typedef NoteSequence::const_iterator NoteConstIterator;
        typedef ::xsd::cxx::tree::traits< NoteType, char > NoteTraits;

        const NoteSequence&
        getNote () const;

        NoteSequence&
        getNote ();

        void
        setNote (const NoteSequence& s);

        // unknown
        //
        typedef ::flexisip::Xsd::Rpid::Empty UnknownType;
        typedef ::xsd::cxx::tree::optional< UnknownType > UnknownOptional;
        typedef ::xsd::cxx::tree::traits< UnknownType, char > UnknownTraits;

        const UnknownOptional&
        getUnknown () const;

        UnknownOptional&
        getUnknown ();

        void
        setUnknown (const UnknownType& x);

        void
        setUnknown (const UnknownOptional& x);

        void
        setUnknown (::std::unique_ptr< UnknownType > p);

        // afraid
        //
        typedef ::flexisip::Xsd::Rpid::Empty AfraidType;
        typedef ::xsd::cxx::tree::sequence< AfraidType > AfraidSequence;
        typedef AfraidSequence::iterator AfraidIterator;
        typedef AfraidSequence::const_iterator AfraidConstIterator;
        typedef ::xsd::cxx::tree::traits< AfraidType, char > AfraidTraits;

        const AfraidSequence&
        getAfraid () const;

        AfraidSequence&
        getAfraid ();

        void
        setAfraid (const AfraidSequence& s);

        // amazed
        //
        typedef ::flexisip::Xsd::Rpid::Empty AmazedType;
        typedef ::xsd::cxx::tree::sequence< AmazedType > AmazedSequence;
        typedef AmazedSequence::iterator AmazedIterator;
        typedef AmazedSequence::const_iterator AmazedConstIterator;
        typedef ::xsd::cxx::tree::traits< AmazedType, char > AmazedTraits;

        const AmazedSequence&
        getAmazed () const;

        AmazedSequence&
        getAmazed ();

        void
        setAmazed (const AmazedSequence& s);

        // angry
        //
        typedef ::flexisip::Xsd::Rpid::Empty AngryType;
        typedef ::xsd::cxx::tree::sequence< AngryType > AngrySequence;
        typedef AngrySequence::iterator AngryIterator;
        typedef AngrySequence::const_iterator AngryConstIterator;
        typedef ::xsd::cxx::tree::traits< AngryType, char > AngryTraits;

        const AngrySequence&
        getAngry () const;

        AngrySequence&
        getAngry ();

        void
        setAngry (const AngrySequence& s);

        // annoyed
        //
        typedef ::flexisip::Xsd::Rpid::Empty AnnoyedType;
        typedef ::xsd::cxx::tree::sequence< AnnoyedType > AnnoyedSequence;
        typedef AnnoyedSequence::iterator AnnoyedIterator;
        typedef AnnoyedSequence::const_iterator AnnoyedConstIterator;
        typedef ::xsd::cxx::tree::traits< AnnoyedType, char > AnnoyedTraits;

        const AnnoyedSequence&
        getAnnoyed () const;

        AnnoyedSequence&
        getAnnoyed ();

        void
        setAnnoyed (const AnnoyedSequence& s);

        // anxious
        //
        typedef ::flexisip::Xsd::Rpid::Empty AnxiousType;
        typedef ::xsd::cxx::tree::sequence< AnxiousType > AnxiousSequence;
        typedef AnxiousSequence::iterator AnxiousIterator;
        typedef AnxiousSequence::const_iterator AnxiousConstIterator;
        typedef ::xsd::cxx::tree::traits< AnxiousType, char > AnxiousTraits;

        const AnxiousSequence&
        getAnxious () const;

        AnxiousSequence&
        getAnxious ();

        void
        setAnxious (const AnxiousSequence& s);

        // ashamed
        //
        typedef ::flexisip::Xsd::Rpid::Empty AshamedType;
        typedef ::xsd::cxx::tree::sequence< AshamedType > AshamedSequence;
        typedef AshamedSequence::iterator AshamedIterator;
        typedef AshamedSequence::const_iterator AshamedConstIterator;
        typedef ::xsd::cxx::tree::traits< AshamedType, char > AshamedTraits;

        const AshamedSequence&
        getAshamed () const;

        AshamedSequence&
        getAshamed ();

        void
        setAshamed (const AshamedSequence& s);

        // bored
        //
        typedef ::flexisip::Xsd::Rpid::Empty BoredType;
        typedef ::xsd::cxx::tree::sequence< BoredType > BoredSequence;
        typedef BoredSequence::iterator BoredIterator;
        typedef BoredSequence::const_iterator BoredConstIterator;
        typedef ::xsd::cxx::tree::traits< BoredType, char > BoredTraits;

        const BoredSequence&
        getBored () const;

        BoredSequence&
        getBored ();

        void
        setBored (const BoredSequence& s);

        // brave
        //
        typedef ::flexisip::Xsd::Rpid::Empty BraveType;
        typedef ::xsd::cxx::tree::sequence< BraveType > BraveSequence;
        typedef BraveSequence::iterator BraveIterator;
        typedef BraveSequence::const_iterator BraveConstIterator;
        typedef ::xsd::cxx::tree::traits< BraveType, char > BraveTraits;

        const BraveSequence&
        getBrave () const;

        BraveSequence&
        getBrave ();

        void
        setBrave (const BraveSequence& s);

        // calm
        //
        typedef ::flexisip::Xsd::Rpid::Empty CalmType;
        typedef ::xsd::cxx::tree::sequence< CalmType > CalmSequence;
        typedef CalmSequence::iterator CalmIterator;
        typedef CalmSequence::const_iterator CalmConstIterator;
        typedef ::xsd::cxx::tree::traits< CalmType, char > CalmTraits;

        const CalmSequence&
        getCalm () const;

        CalmSequence&
        getCalm ();

        void
        setCalm (const CalmSequence& s);

        // cold
        //
        typedef ::flexisip::Xsd::Rpid::Empty ColdType;
        typedef ::xsd::cxx::tree::sequence< ColdType > ColdSequence;
        typedef ColdSequence::iterator ColdIterator;
        typedef ColdSequence::const_iterator ColdConstIterator;
        typedef ::xsd::cxx::tree::traits< ColdType, char > ColdTraits;

        const ColdSequence&
        getCold () const;

        ColdSequence&
        getCold ();

        void
        setCold (const ColdSequence& s);

        // confused
        //
        typedef ::flexisip::Xsd::Rpid::Empty ConfusedType;
        typedef ::xsd::cxx::tree::sequence< ConfusedType > ConfusedSequence;
        typedef ConfusedSequence::iterator ConfusedIterator;
        typedef ConfusedSequence::const_iterator ConfusedConstIterator;
        typedef ::xsd::cxx::tree::traits< ConfusedType, char > ConfusedTraits;

        const ConfusedSequence&
        getConfused () const;

        ConfusedSequence&
        getConfused ();

        void
        setConfused (const ConfusedSequence& s);

        // contented
        //
        typedef ::flexisip::Xsd::Rpid::Empty ContentedType;
        typedef ::xsd::cxx::tree::sequence< ContentedType > ContentedSequence;
        typedef ContentedSequence::iterator ContentedIterator;
        typedef ContentedSequence::const_iterator ContentedConstIterator;
        typedef ::xsd::cxx::tree::traits< ContentedType, char > ContentedTraits;

        const ContentedSequence&
        getContented () const;

        ContentedSequence&
        getContented ();

        void
        setContented (const ContentedSequence& s);

        // cranky
        //
        typedef ::flexisip::Xsd::Rpid::Empty CrankyType;
        typedef ::xsd::cxx::tree::sequence< CrankyType > CrankySequence;
        typedef CrankySequence::iterator CrankyIterator;
        typedef CrankySequence::const_iterator CrankyConstIterator;
        typedef ::xsd::cxx::tree::traits< CrankyType, char > CrankyTraits;

        const CrankySequence&
        getCranky () const;

        CrankySequence&
        getCranky ();

        void
        setCranky (const CrankySequence& s);

        // curious
        //
        typedef ::flexisip::Xsd::Rpid::Empty CuriousType;
        typedef ::xsd::cxx::tree::sequence< CuriousType > CuriousSequence;
        typedef CuriousSequence::iterator CuriousIterator;
        typedef CuriousSequence::const_iterator CuriousConstIterator;
        typedef ::xsd::cxx::tree::traits< CuriousType, char > CuriousTraits;

        const CuriousSequence&
        getCurious () const;

        CuriousSequence&
        getCurious ();

        void
        setCurious (const CuriousSequence& s);

        // depressed
        //
        typedef ::flexisip::Xsd::Rpid::Empty DepressedType;
        typedef ::xsd::cxx::tree::sequence< DepressedType > DepressedSequence;
        typedef DepressedSequence::iterator DepressedIterator;
        typedef DepressedSequence::const_iterator DepressedConstIterator;
        typedef ::xsd::cxx::tree::traits< DepressedType, char > DepressedTraits;

        const DepressedSequence&
        getDepressed () const;

        DepressedSequence&
        getDepressed ();

        void
        setDepressed (const DepressedSequence& s);

        // disappointed
        //
        typedef ::flexisip::Xsd::Rpid::Empty DisappointedType;
        typedef ::xsd::cxx::tree::sequence< DisappointedType > DisappointedSequence;
        typedef DisappointedSequence::iterator DisappointedIterator;
        typedef DisappointedSequence::const_iterator DisappointedConstIterator;
        typedef ::xsd::cxx::tree::traits< DisappointedType, char > DisappointedTraits;

        const DisappointedSequence&
        getDisappointed () const;

        DisappointedSequence&
        getDisappointed ();

        void
        setDisappointed (const DisappointedSequence& s);

        // disgusted
        //
        typedef ::flexisip::Xsd::Rpid::Empty DisgustedType;
        typedef ::xsd::cxx::tree::sequence< DisgustedType > DisgustedSequence;
        typedef DisgustedSequence::iterator DisgustedIterator;
        typedef DisgustedSequence::const_iterator DisgustedConstIterator;
        typedef ::xsd::cxx::tree::traits< DisgustedType, char > DisgustedTraits;

        const DisgustedSequence&
        getDisgusted () const;

        DisgustedSequence&
        getDisgusted ();

        void
        setDisgusted (const DisgustedSequence& s);

        // distracted
        //
        typedef ::flexisip::Xsd::Rpid::Empty DistractedType;
        typedef ::xsd::cxx::tree::sequence< DistractedType > DistractedSequence;
        typedef DistractedSequence::iterator DistractedIterator;
        typedef DistractedSequence::const_iterator DistractedConstIterator;
        typedef ::xsd::cxx::tree::traits< DistractedType, char > DistractedTraits;

        const DistractedSequence&
        getDistracted () const;

        DistractedSequence&
        getDistracted ();

        void
        setDistracted (const DistractedSequence& s);

        // embarrassed
        //
        typedef ::flexisip::Xsd::Rpid::Empty EmbarrassedType;
        typedef ::xsd::cxx::tree::sequence< EmbarrassedType > EmbarrassedSequence;
        typedef EmbarrassedSequence::iterator EmbarrassedIterator;
        typedef EmbarrassedSequence::const_iterator EmbarrassedConstIterator;
        typedef ::xsd::cxx::tree::traits< EmbarrassedType, char > EmbarrassedTraits;

        const EmbarrassedSequence&
        getEmbarrassed () const;

        EmbarrassedSequence&
        getEmbarrassed ();

        void
        setEmbarrassed (const EmbarrassedSequence& s);

        // excited
        //
        typedef ::flexisip::Xsd::Rpid::Empty ExcitedType;
        typedef ::xsd::cxx::tree::sequence< ExcitedType > ExcitedSequence;
        typedef ExcitedSequence::iterator ExcitedIterator;
        typedef ExcitedSequence::const_iterator ExcitedConstIterator;
        typedef ::xsd::cxx::tree::traits< ExcitedType, char > ExcitedTraits;

        const ExcitedSequence&
        getExcited () const;

        ExcitedSequence&
        getExcited ();

        void
        setExcited (const ExcitedSequence& s);

        // flirtatious
        //
        typedef ::flexisip::Xsd::Rpid::Empty FlirtatiousType;
        typedef ::xsd::cxx::tree::sequence< FlirtatiousType > FlirtatiousSequence;
        typedef FlirtatiousSequence::iterator FlirtatiousIterator;
        typedef FlirtatiousSequence::const_iterator FlirtatiousConstIterator;
        typedef ::xsd::cxx::tree::traits< FlirtatiousType, char > FlirtatiousTraits;

        const FlirtatiousSequence&
        getFlirtatious () const;

        FlirtatiousSequence&
        getFlirtatious ();

        void
        setFlirtatious (const FlirtatiousSequence& s);

        // frustrated
        //
        typedef ::flexisip::Xsd::Rpid::Empty FrustratedType;
        typedef ::xsd::cxx::tree::sequence< FrustratedType > FrustratedSequence;
        typedef FrustratedSequence::iterator FrustratedIterator;
        typedef FrustratedSequence::const_iterator FrustratedConstIterator;
        typedef ::xsd::cxx::tree::traits< FrustratedType, char > FrustratedTraits;

        const FrustratedSequence&
        getFrustrated () const;

        FrustratedSequence&
        getFrustrated ();

        void
        setFrustrated (const FrustratedSequence& s);

        // grumpy
        //
        typedef ::flexisip::Xsd::Rpid::Empty GrumpyType;
        typedef ::xsd::cxx::tree::sequence< GrumpyType > GrumpySequence;
        typedef GrumpySequence::iterator GrumpyIterator;
        typedef GrumpySequence::const_iterator GrumpyConstIterator;
        typedef ::xsd::cxx::tree::traits< GrumpyType, char > GrumpyTraits;

        const GrumpySequence&
        getGrumpy () const;

        GrumpySequence&
        getGrumpy ();

        void
        setGrumpy (const GrumpySequence& s);

        // guilty
        //
        typedef ::flexisip::Xsd::Rpid::Empty GuiltyType;
        typedef ::xsd::cxx::tree::sequence< GuiltyType > GuiltySequence;
        typedef GuiltySequence::iterator GuiltyIterator;
        typedef GuiltySequence::const_iterator GuiltyConstIterator;
        typedef ::xsd::cxx::tree::traits< GuiltyType, char > GuiltyTraits;

        const GuiltySequence&
        getGuilty () const;

        GuiltySequence&
        getGuilty ();

        void
        setGuilty (const GuiltySequence& s);

        // happy
        //
        typedef ::flexisip::Xsd::Rpid::Empty HappyType;
        typedef ::xsd::cxx::tree::sequence< HappyType > HappySequence;
        typedef HappySequence::iterator HappyIterator;
        typedef HappySequence::const_iterator HappyConstIterator;
        typedef ::xsd::cxx::tree::traits< HappyType, char > HappyTraits;

        const HappySequence&
        getHappy () const;

        HappySequence&
        getHappy ();

        void
        setHappy (const HappySequence& s);

        // hot
        //
        typedef ::flexisip::Xsd::Rpid::Empty HotType;
        typedef ::xsd::cxx::tree::sequence< HotType > HotSequence;
        typedef HotSequence::iterator HotIterator;
        typedef HotSequence::const_iterator HotConstIterator;
        typedef ::xsd::cxx::tree::traits< HotType, char > HotTraits;

        const HotSequence&
        getHot () const;

        HotSequence&
        getHot ();

        void
        setHot (const HotSequence& s);

        // humbled
        //
        typedef ::flexisip::Xsd::Rpid::Empty HumbledType;
        typedef ::xsd::cxx::tree::sequence< HumbledType > HumbledSequence;
        typedef HumbledSequence::iterator HumbledIterator;
        typedef HumbledSequence::const_iterator HumbledConstIterator;
        typedef ::xsd::cxx::tree::traits< HumbledType, char > HumbledTraits;

        const HumbledSequence&
        getHumbled () const;

        HumbledSequence&
        getHumbled ();

        void
        setHumbled (const HumbledSequence& s);

        // humiliated
        //
        typedef ::flexisip::Xsd::Rpid::Empty HumiliatedType;
        typedef ::xsd::cxx::tree::sequence< HumiliatedType > HumiliatedSequence;
        typedef HumiliatedSequence::iterator HumiliatedIterator;
        typedef HumiliatedSequence::const_iterator HumiliatedConstIterator;
        typedef ::xsd::cxx::tree::traits< HumiliatedType, char > HumiliatedTraits;

        const HumiliatedSequence&
        getHumiliated () const;

        HumiliatedSequence&
        getHumiliated ();

        void
        setHumiliated (const HumiliatedSequence& s);

        // hungry
        //
        typedef ::flexisip::Xsd::Rpid::Empty HungryType;
        typedef ::xsd::cxx::tree::sequence< HungryType > HungrySequence;
        typedef HungrySequence::iterator HungryIterator;
        typedef HungrySequence::const_iterator HungryConstIterator;
        typedef ::xsd::cxx::tree::traits< HungryType, char > HungryTraits;

        const HungrySequence&
        getHungry () const;

        HungrySequence&
        getHungry ();

        void
        setHungry (const HungrySequence& s);

        // hurt
        //
        typedef ::flexisip::Xsd::Rpid::Empty HurtType;
        typedef ::xsd::cxx::tree::sequence< HurtType > HurtSequence;
        typedef HurtSequence::iterator HurtIterator;
        typedef HurtSequence::const_iterator HurtConstIterator;
        typedef ::xsd::cxx::tree::traits< HurtType, char > HurtTraits;

        const HurtSequence&
        getHurt () const;

        HurtSequence&
        getHurt ();

        void
        setHurt (const HurtSequence& s);

        // impressed
        //
        typedef ::flexisip::Xsd::Rpid::Empty ImpressedType;
        typedef ::xsd::cxx::tree::sequence< ImpressedType > ImpressedSequence;
        typedef ImpressedSequence::iterator ImpressedIterator;
        typedef ImpressedSequence::const_iterator ImpressedConstIterator;
        typedef ::xsd::cxx::tree::traits< ImpressedType, char > ImpressedTraits;

        const ImpressedSequence&
        getImpressed () const;

        ImpressedSequence&
        getImpressed ();

        void
        setImpressed (const ImpressedSequence& s);

        // in_awe
        //
        typedef ::flexisip::Xsd::Rpid::Empty In_aweType;
        typedef ::xsd::cxx::tree::sequence< In_aweType > In_aweSequence;
        typedef In_aweSequence::iterator In_aweIterator;
        typedef In_aweSequence::const_iterator In_aweConstIterator;
        typedef ::xsd::cxx::tree::traits< In_aweType, char > In_aweTraits;

        const In_aweSequence&
        getIn_awe () const;

        In_aweSequence&
        getIn_awe ();

        void
        setIn_awe (const In_aweSequence& s);

        // in_love
        //
        typedef ::flexisip::Xsd::Rpid::Empty In_loveType;
        typedef ::xsd::cxx::tree::sequence< In_loveType > In_loveSequence;
        typedef In_loveSequence::iterator In_loveIterator;
        typedef In_loveSequence::const_iterator In_loveConstIterator;
        typedef ::xsd::cxx::tree::traits< In_loveType, char > In_loveTraits;

        const In_loveSequence&
        getIn_love () const;

        In_loveSequence&
        getIn_love ();

        void
        setIn_love (const In_loveSequence& s);

        // indignant
        //
        typedef ::flexisip::Xsd::Rpid::Empty IndignantType;
        typedef ::xsd::cxx::tree::sequence< IndignantType > IndignantSequence;
        typedef IndignantSequence::iterator IndignantIterator;
        typedef IndignantSequence::const_iterator IndignantConstIterator;
        typedef ::xsd::cxx::tree::traits< IndignantType, char > IndignantTraits;

        const IndignantSequence&
        getIndignant () const;

        IndignantSequence&
        getIndignant ();

        void
        setIndignant (const IndignantSequence& s);

        // interested
        //
        typedef ::flexisip::Xsd::Rpid::Empty InterestedType;
        typedef ::xsd::cxx::tree::sequence< InterestedType > InterestedSequence;
        typedef InterestedSequence::iterator InterestedIterator;
        typedef InterestedSequence::const_iterator InterestedConstIterator;
        typedef ::xsd::cxx::tree::traits< InterestedType, char > InterestedTraits;

        const InterestedSequence&
        getInterested () const;

        InterestedSequence&
        getInterested ();

        void
        setInterested (const InterestedSequence& s);

        // invincible
        //
        typedef ::flexisip::Xsd::Rpid::Empty InvincibleType;
        typedef ::xsd::cxx::tree::sequence< InvincibleType > InvincibleSequence;
        typedef InvincibleSequence::iterator InvincibleIterator;
        typedef InvincibleSequence::const_iterator InvincibleConstIterator;
        typedef ::xsd::cxx::tree::traits< InvincibleType, char > InvincibleTraits;

        const InvincibleSequence&
        getInvincible () const;

        InvincibleSequence&
        getInvincible ();

        void
        setInvincible (const InvincibleSequence& s);

        // jealous
        //
        typedef ::flexisip::Xsd::Rpid::Empty JealousType;
        typedef ::xsd::cxx::tree::sequence< JealousType > JealousSequence;
        typedef JealousSequence::iterator JealousIterator;
        typedef JealousSequence::const_iterator JealousConstIterator;
        typedef ::xsd::cxx::tree::traits< JealousType, char > JealousTraits;

        const JealousSequence&
        getJealous () const;

        JealousSequence&
        getJealous ();

        void
        setJealous (const JealousSequence& s);

        // lonely
        //
        typedef ::flexisip::Xsd::Rpid::Empty LonelyType;
        typedef ::xsd::cxx::tree::sequence< LonelyType > LonelySequence;
        typedef LonelySequence::iterator LonelyIterator;
        typedef LonelySequence::const_iterator LonelyConstIterator;
        typedef ::xsd::cxx::tree::traits< LonelyType, char > LonelyTraits;

        const LonelySequence&
        getLonely () const;

        LonelySequence&
        getLonely ();

        void
        setLonely (const LonelySequence& s);

        // mean
        //
        typedef ::flexisip::Xsd::Rpid::Empty MeanType;
        typedef ::xsd::cxx::tree::sequence< MeanType > MeanSequence;
        typedef MeanSequence::iterator MeanIterator;
        typedef MeanSequence::const_iterator MeanConstIterator;
        typedef ::xsd::cxx::tree::traits< MeanType, char > MeanTraits;

        const MeanSequence&
        getMean () const;

        MeanSequence&
        getMean ();

        void
        setMean (const MeanSequence& s);

        // moody
        //
        typedef ::flexisip::Xsd::Rpid::Empty MoodyType;
        typedef ::xsd::cxx::tree::sequence< MoodyType > MoodySequence;
        typedef MoodySequence::iterator MoodyIterator;
        typedef MoodySequence::const_iterator MoodyConstIterator;
        typedef ::xsd::cxx::tree::traits< MoodyType, char > MoodyTraits;

        const MoodySequence&
        getMoody () const;

        MoodySequence&
        getMoody ();

        void
        setMoody (const MoodySequence& s);

        // nervous
        //
        typedef ::flexisip::Xsd::Rpid::Empty NervousType;
        typedef ::xsd::cxx::tree::sequence< NervousType > NervousSequence;
        typedef NervousSequence::iterator NervousIterator;
        typedef NervousSequence::const_iterator NervousConstIterator;
        typedef ::xsd::cxx::tree::traits< NervousType, char > NervousTraits;

        const NervousSequence&
        getNervous () const;

        NervousSequence&
        getNervous ();

        void
        setNervous (const NervousSequence& s);

        // neutral
        //
        typedef ::flexisip::Xsd::Rpid::Empty NeutralType;
        typedef ::xsd::cxx::tree::sequence< NeutralType > NeutralSequence;
        typedef NeutralSequence::iterator NeutralIterator;
        typedef NeutralSequence::const_iterator NeutralConstIterator;
        typedef ::xsd::cxx::tree::traits< NeutralType, char > NeutralTraits;

        const NeutralSequence&
        getNeutral () const;

        NeutralSequence&
        getNeutral ();

        void
        setNeutral (const NeutralSequence& s);

        // offended
        //
        typedef ::flexisip::Xsd::Rpid::Empty OffendedType;
        typedef ::xsd::cxx::tree::sequence< OffendedType > OffendedSequence;
        typedef OffendedSequence::iterator OffendedIterator;
        typedef OffendedSequence::const_iterator OffendedConstIterator;
        typedef ::xsd::cxx::tree::traits< OffendedType, char > OffendedTraits;

        const OffendedSequence&
        getOffended () const;

        OffendedSequence&
        getOffended ();

        void
        setOffended (const OffendedSequence& s);

        // playful
        //
        typedef ::flexisip::Xsd::Rpid::Empty PlayfulType;
        typedef ::xsd::cxx::tree::sequence< PlayfulType > PlayfulSequence;
        typedef PlayfulSequence::iterator PlayfulIterator;
        typedef PlayfulSequence::const_iterator PlayfulConstIterator;
        typedef ::xsd::cxx::tree::traits< PlayfulType, char > PlayfulTraits;

        const PlayfulSequence&
        getPlayful () const;

        PlayfulSequence&
        getPlayful ();

        void
        setPlayful (const PlayfulSequence& s);

        // proud
        //
        typedef ::flexisip::Xsd::Rpid::Empty ProudType;
        typedef ::xsd::cxx::tree::sequence< ProudType > ProudSequence;
        typedef ProudSequence::iterator ProudIterator;
        typedef ProudSequence::const_iterator ProudConstIterator;
        typedef ::xsd::cxx::tree::traits< ProudType, char > ProudTraits;

        const ProudSequence&
        getProud () const;

        ProudSequence&
        getProud ();

        void
        setProud (const ProudSequence& s);

        // relieved
        //
        typedef ::flexisip::Xsd::Rpid::Empty RelievedType;
        typedef ::xsd::cxx::tree::sequence< RelievedType > RelievedSequence;
        typedef RelievedSequence::iterator RelievedIterator;
        typedef RelievedSequence::const_iterator RelievedConstIterator;
        typedef ::xsd::cxx::tree::traits< RelievedType, char > RelievedTraits;

        const RelievedSequence&
        getRelieved () const;

        RelievedSequence&
        getRelieved ();

        void
        setRelieved (const RelievedSequence& s);

        // remorseful
        //
        typedef ::flexisip::Xsd::Rpid::Empty RemorsefulType;
        typedef ::xsd::cxx::tree::sequence< RemorsefulType > RemorsefulSequence;
        typedef RemorsefulSequence::iterator RemorsefulIterator;
        typedef RemorsefulSequence::const_iterator RemorsefulConstIterator;
        typedef ::xsd::cxx::tree::traits< RemorsefulType, char > RemorsefulTraits;

        const RemorsefulSequence&
        getRemorseful () const;

        RemorsefulSequence&
        getRemorseful ();

        void
        setRemorseful (const RemorsefulSequence& s);

        // restless
        //
        typedef ::flexisip::Xsd::Rpid::Empty RestlessType;
        typedef ::xsd::cxx::tree::sequence< RestlessType > RestlessSequence;
        typedef RestlessSequence::iterator RestlessIterator;
        typedef RestlessSequence::const_iterator RestlessConstIterator;
        typedef ::xsd::cxx::tree::traits< RestlessType, char > RestlessTraits;

        const RestlessSequence&
        getRestless () const;

        RestlessSequence&
        getRestless ();

        void
        setRestless (const RestlessSequence& s);

        // sad
        //
        typedef ::flexisip::Xsd::Rpid::Empty SadType;
        typedef ::xsd::cxx::tree::sequence< SadType > SadSequence;
        typedef SadSequence::iterator SadIterator;
        typedef SadSequence::const_iterator SadConstIterator;
        typedef ::xsd::cxx::tree::traits< SadType, char > SadTraits;

        const SadSequence&
        getSad () const;

        SadSequence&
        getSad ();

        void
        setSad (const SadSequence& s);

        // sarcastic
        //
        typedef ::flexisip::Xsd::Rpid::Empty SarcasticType;
        typedef ::xsd::cxx::tree::sequence< SarcasticType > SarcasticSequence;
        typedef SarcasticSequence::iterator SarcasticIterator;
        typedef SarcasticSequence::const_iterator SarcasticConstIterator;
        typedef ::xsd::cxx::tree::traits< SarcasticType, char > SarcasticTraits;

        const SarcasticSequence&
        getSarcastic () const;

        SarcasticSequence&
        getSarcastic ();

        void
        setSarcastic (const SarcasticSequence& s);

        // serious
        //
        typedef ::flexisip::Xsd::Rpid::Empty SeriousType;
        typedef ::xsd::cxx::tree::sequence< SeriousType > SeriousSequence;
        typedef SeriousSequence::iterator SeriousIterator;
        typedef SeriousSequence::const_iterator SeriousConstIterator;
        typedef ::xsd::cxx::tree::traits< SeriousType, char > SeriousTraits;

        const SeriousSequence&
        getSerious () const;

        SeriousSequence&
        getSerious ();

        void
        setSerious (const SeriousSequence& s);

        // shocked
        //
        typedef ::flexisip::Xsd::Rpid::Empty ShockedType;
        typedef ::xsd::cxx::tree::sequence< ShockedType > ShockedSequence;
        typedef ShockedSequence::iterator ShockedIterator;
        typedef ShockedSequence::const_iterator ShockedConstIterator;
        typedef ::xsd::cxx::tree::traits< ShockedType, char > ShockedTraits;

        const ShockedSequence&
        getShocked () const;

        ShockedSequence&
        getShocked ();

        void
        setShocked (const ShockedSequence& s);

        // shy
        //
        typedef ::flexisip::Xsd::Rpid::Empty ShyType;
        typedef ::xsd::cxx::tree::sequence< ShyType > ShySequence;
        typedef ShySequence::iterator ShyIterator;
        typedef ShySequence::const_iterator ShyConstIterator;
        typedef ::xsd::cxx::tree::traits< ShyType, char > ShyTraits;

        const ShySequence&
        getShy () const;

        ShySequence&
        getShy ();

        void
        setShy (const ShySequence& s);

        // sick
        //
        typedef ::flexisip::Xsd::Rpid::Empty SickType;
        typedef ::xsd::cxx::tree::sequence< SickType > SickSequence;
        typedef SickSequence::iterator SickIterator;
        typedef SickSequence::const_iterator SickConstIterator;
        typedef ::xsd::cxx::tree::traits< SickType, char > SickTraits;

        const SickSequence&
        getSick () const;

        SickSequence&
        getSick ();

        void
        setSick (const SickSequence& s);

        // sleepy
        //
        typedef ::flexisip::Xsd::Rpid::Empty SleepyType;
        typedef ::xsd::cxx::tree::sequence< SleepyType > SleepySequence;
        typedef SleepySequence::iterator SleepyIterator;
        typedef SleepySequence::const_iterator SleepyConstIterator;
        typedef ::xsd::cxx::tree::traits< SleepyType, char > SleepyTraits;

        const SleepySequence&
        getSleepy () const;

        SleepySequence&
        getSleepy ();

        void
        setSleepy (const SleepySequence& s);

        // stressed
        //
        typedef ::flexisip::Xsd::Rpid::Empty StressedType;
        typedef ::xsd::cxx::tree::sequence< StressedType > StressedSequence;
        typedef StressedSequence::iterator StressedIterator;
        typedef StressedSequence::const_iterator StressedConstIterator;
        typedef ::xsd::cxx::tree::traits< StressedType, char > StressedTraits;

        const StressedSequence&
        getStressed () const;

        StressedSequence&
        getStressed ();

        void
        setStressed (const StressedSequence& s);

        // surprised
        //
        typedef ::flexisip::Xsd::Rpid::Empty SurprisedType;
        typedef ::xsd::cxx::tree::sequence< SurprisedType > SurprisedSequence;
        typedef SurprisedSequence::iterator SurprisedIterator;
        typedef SurprisedSequence::const_iterator SurprisedConstIterator;
        typedef ::xsd::cxx::tree::traits< SurprisedType, char > SurprisedTraits;

        const SurprisedSequence&
        getSurprised () const;

        SurprisedSequence&
        getSurprised ();

        void
        setSurprised (const SurprisedSequence& s);

        // thirsty
        //
        typedef ::flexisip::Xsd::Rpid::Empty ThirstyType;
        typedef ::xsd::cxx::tree::sequence< ThirstyType > ThirstySequence;
        typedef ThirstySequence::iterator ThirstyIterator;
        typedef ThirstySequence::const_iterator ThirstyConstIterator;
        typedef ::xsd::cxx::tree::traits< ThirstyType, char > ThirstyTraits;

        const ThirstySequence&
        getThirsty () const;

        ThirstySequence&
        getThirsty ();

        void
        setThirsty (const ThirstySequence& s);

        // worried
        //
        typedef ::flexisip::Xsd::Rpid::Empty WorriedType;
        typedef ::xsd::cxx::tree::sequence< WorriedType > WorriedSequence;
        typedef WorriedSequence::iterator WorriedIterator;
        typedef WorriedSequence::const_iterator WorriedConstIterator;
        typedef ::xsd::cxx::tree::traits< WorriedType, char > WorriedTraits;

        const WorriedSequence&
        getWorried () const;

        WorriedSequence&
        getWorried ();

        void
        setWorried (const WorriedSequence& s);

        // other
        //
        typedef ::flexisip::Xsd::Rpid::Note_t OtherType;
        typedef ::xsd::cxx::tree::sequence< OtherType > OtherSequence;
        typedef OtherSequence::iterator OtherIterator;
        typedef OtherSequence::const_iterator OtherConstIterator;
        typedef ::xsd::cxx::tree::traits< OtherType, char > OtherTraits;

        const OtherSequence&
        getOther () const;

        OtherSequence&
        getOther ();

        void
        setOther (const OtherSequence& s);

        // any
        //
        typedef ::xsd::cxx::tree::element_sequence AnySequence;
        typedef AnySequence::iterator AnyIterator;
        typedef AnySequence::const_iterator AnyConstIterator;

        const AnySequence&
        getAny () const;

        AnySequence&
        getAny ();

        void
        setAny (const AnySequence& s);

        // from
        //
        typedef ::flexisip::Xsd::XmlSchema::DateTime FromType;
        typedef ::xsd::cxx::tree::optional< FromType > FromOptional;
        typedef ::xsd::cxx::tree::traits< FromType, char > FromTraits;

        const FromOptional&
        getFrom () const;

        FromOptional&
        getFrom ();

        void
        setFrom (const FromType& x);

        void
        setFrom (const FromOptional& x);

        void
        setFrom (::std::unique_ptr< FromType > p);

        // until
        //
        typedef ::flexisip::Xsd::XmlSchema::DateTime UntilType;
        typedef ::xsd::cxx::tree::optional< UntilType > UntilOptional;
        typedef ::xsd::cxx::tree::traits< UntilType, char > UntilTraits;

        const UntilOptional&
        getUntil () const;

        UntilOptional&
        getUntil ();

        void
        setUntil (const UntilType& x);

        void
        setUntil (const UntilOptional& x);

        void
        setUntil (::std::unique_ptr< UntilType > p);

        // id
        //
        typedef ::flexisip::Xsd::XmlSchema::Id IdType;
        typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
        typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

        const IdOptional&
        getId () const;

        IdOptional&
        getId ();

        void
        setId (const IdType& x);

        void
        setId (const IdOptional& x);

        void
        setId (::std::unique_ptr< IdType > p);

        // any_attribute
        //
        typedef ::xsd::cxx::tree::attribute_set< char > AnyAttributeSet;
        typedef AnyAttributeSet::iterator AnyAttributeIterator;
        typedef AnyAttributeSet::const_iterator AnyAttributeConstIterator;

        const AnyAttributeSet&
        getAnyAttribute () const;

        AnyAttributeSet&
        getAnyAttribute ();

        void
        setAnyAttribute (const AnyAttributeSet& s);

        // DOMDocument for wildcard content.
        //
        const ::xercesc::DOMDocument&
        getDomDocument () const;

        ::xercesc::DOMDocument&
        getDomDocument ();

        // Constructors.
        //
        Mood ();

        Mood (const ::xercesc::DOMElement& e,
              ::flexisip::Xsd::XmlSchema::Flags f = 0,
              ::flexisip::Xsd::XmlSchema::Container* c = 0);

        Mood (const Mood& x,
              ::flexisip::Xsd::XmlSchema::Flags f = 0,
              ::flexisip::Xsd::XmlSchema::Container* c = 0);

        virtual Mood*
        _clone (::flexisip::Xsd::XmlSchema::Flags f = 0,
                ::flexisip::Xsd::XmlSchema::Container* c = 0) const;

        Mood&
        operator= (const Mood& x);

        virtual 
        ~Mood ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::flexisip::Xsd::XmlSchema::Flags);

        protected:
        ::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument > dom_document_;

        NoteSequence note_;
        UnknownOptional unknown_;
        AfraidSequence afraid_;
        AmazedSequence amazed_;
        AngrySequence angry_;
        AnnoyedSequence annoyed_;
        AnxiousSequence anxious_;
        AshamedSequence ashamed_;
        BoredSequence bored_;
        BraveSequence brave_;
        CalmSequence calm_;
        ColdSequence cold_;
        ConfusedSequence confused_;
        ContentedSequence contented_;
        CrankySequence cranky_;
        CuriousSequence curious_;
        DepressedSequence depressed_;
        DisappointedSequence disappointed_;
        DisgustedSequence disgusted_;
        DistractedSequence distracted_;
        EmbarrassedSequence embarrassed_;
        ExcitedSequence excited_;
        FlirtatiousSequence flirtatious_;
        FrustratedSequence frustrated_;
        GrumpySequence grumpy_;
        GuiltySequence guilty_;
        HappySequence happy_;
        HotSequence hot_;
        HumbledSequence humbled_;
        HumiliatedSequence humiliated_;
        HungrySequence hungry_;
        HurtSequence hurt_;
        ImpressedSequence impressed_;
        In_aweSequence in_awe_;
        In_loveSequence in_love_;
        IndignantSequence indignant_;
        InterestedSequence interested_;
        InvincibleSequence invincible_;
        JealousSequence jealous_;
        LonelySequence lonely_;
        MeanSequence mean_;
        MoodySequence moody_;
        NervousSequence nervous_;
        NeutralSequence neutral_;
        OffendedSequence offended_;
        PlayfulSequence playful_;
        ProudSequence proud_;
        RelievedSequence relieved_;
        RemorsefulSequence remorseful_;
        RestlessSequence restless_;
        SadSequence sad_;
        SarcasticSequence sarcastic_;
        SeriousSequence serious_;
        ShockedSequence shocked_;
        ShySequence shy_;
        SickSequence sick_;
        SleepySequence sleepy_;
        StressedSequence stressed_;
        SurprisedSequence surprised_;
        ThirstySequence thirsty_;
        WorriedSequence worried_;
        OtherSequence other_;
        AnySequence any_;
        FromOptional from_;
        UntilOptional until_;
        IdOptional id_;
        AnyAttributeSet any_attribute_;
      };

      class PlaceIs: public ::flexisip::Xsd::XmlSchema::Type
      {
        public:
        // note
        //
        typedef ::flexisip::Xsd::Rpid::Note_t NoteType;
        typedef ::xsd::cxx::tree::sequence< NoteType > NoteSequence;
        typedef NoteSequence::iterator NoteIterator;
        typedef NoteSequence::const_iterator NoteConstIterator;
        typedef ::xsd::cxx::tree::traits< NoteType, char > NoteTraits;

        const NoteSequence&
        getNote () const;

        NoteSequence&
        getNote ();

        void
        setNote (const NoteSequence& s);

        // audio
        //
        typedef ::flexisip::Xsd::Rpid::Audio AudioType;
        typedef ::xsd::cxx::tree::optional< AudioType > AudioOptional;
        typedef ::xsd::cxx::tree::traits< AudioType, char > AudioTraits;

        const AudioOptional&
        getAudio () const;

        AudioOptional&
        getAudio ();

        void
        setAudio (const AudioType& x);

        void
        setAudio (const AudioOptional& x);

        void
        setAudio (::std::unique_ptr< AudioType > p);

        // video
        //
        typedef ::flexisip::Xsd::Rpid::Video VideoType;
        typedef ::xsd::cxx::tree::optional< VideoType > VideoOptional;
        typedef ::xsd::cxx::tree::traits< VideoType, char > VideoTraits;

        const VideoOptional&
        getVideo () const;

        VideoOptional&
        getVideo ();

        void
        setVideo (const VideoType& x);

        void
        setVideo (const VideoOptional& x);

        void
        setVideo (::std::unique_ptr< VideoType > p);

        // text
        //
        typedef ::flexisip::Xsd::Rpid::Text TextType;
        typedef ::xsd::cxx::tree::optional< TextType > TextOptional;
        typedef ::xsd::cxx::tree::traits< TextType, char > TextTraits;

        const TextOptional&
        getText () const;

        TextOptional&
        getText ();

        void
        setText (const TextType& x);

        void
        setText (const TextOptional& x);

        void
        setText (::std::unique_ptr< TextType > p);

        // from
        //
        typedef ::flexisip::Xsd::XmlSchema::DateTime FromType;
        typedef ::xsd::cxx::tree::optional< FromType > FromOptional;
        typedef ::xsd::cxx::tree::traits< FromType, char > FromTraits;

        const FromOptional&
        getFrom () const;

        FromOptional&
        getFrom ();

        void
        setFrom (const FromType& x);

        void
        setFrom (const FromOptional& x);

        void
        setFrom (::std::unique_ptr< FromType > p);

        // until
        //
        typedef ::flexisip::Xsd::XmlSchema::DateTime UntilType;
        typedef ::xsd::cxx::tree::optional< UntilType > UntilOptional;
        typedef ::xsd::cxx::tree::traits< UntilType, char > UntilTraits;

        const UntilOptional&
        getUntil () const;

        UntilOptional&
        getUntil ();

        void
        setUntil (const UntilType& x);

        void
        setUntil (const UntilOptional& x);

        void
        setUntil (::std::unique_ptr< UntilType > p);

        // id
        //
        typedef ::flexisip::Xsd::XmlSchema::Id IdType;
        typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
        typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

        const IdOptional&
        getId () const;

        IdOptional&
        getId ();

        void
        setId (const IdType& x);

        void
        setId (const IdOptional& x);

        void
        setId (::std::unique_ptr< IdType > p);

        // any_attribute
        //
        typedef ::xsd::cxx::tree::attribute_set< char > AnyAttributeSet;
        typedef AnyAttributeSet::iterator AnyAttributeIterator;
        typedef AnyAttributeSet::const_iterator AnyAttributeConstIterator;

        const AnyAttributeSet&
        getAnyAttribute () const;

        AnyAttributeSet&
        getAnyAttribute ();

        void
        setAnyAttribute (const AnyAttributeSet& s);

        // DOMDocument for wildcard content.
        //
        const ::xercesc::DOMDocument&
        getDomDocument () const;

        ::xercesc::DOMDocument&
        getDomDocument ();

        // Constructors.
        //
        PlaceIs ();

        PlaceIs (const ::xercesc::DOMElement& e,
                 ::flexisip::Xsd::XmlSchema::Flags f = 0,
                 ::flexisip::Xsd::XmlSchema::Container* c = 0);

        PlaceIs (const PlaceIs& x,
                 ::flexisip::Xsd::XmlSchema::Flags f = 0,
                 ::flexisip::Xsd::XmlSchema::Container* c = 0);

        virtual PlaceIs*
        _clone (::flexisip::Xsd::XmlSchema::Flags f = 0,
                ::flexisip::Xsd::XmlSchema::Container* c = 0) const;

        PlaceIs&
        operator= (const PlaceIs& x);

        virtual 
        ~PlaceIs ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::flexisip::Xsd::XmlSchema::Flags);

        protected:
        ::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument > dom_document_;

        NoteSequence note_;
        AudioOptional audio_;
        VideoOptional video_;
        TextOptional text_;
        FromOptional from_;
        UntilOptional until_;
        IdOptional id_;
        AnyAttributeSet any_attribute_;
      };

      class PlaceType: public ::flexisip::Xsd::XmlSchema::Type
      {
        public:
        // note
        //
        typedef ::flexisip::Xsd::Rpid::Note_t NoteType;
        typedef ::xsd::cxx::tree::sequence< NoteType > NoteSequence;
        typedef NoteSequence::iterator NoteIterator;
        typedef NoteSequence::const_iterator NoteConstIterator;
        typedef ::xsd::cxx::tree::traits< NoteType, char > NoteTraits;

        const NoteSequence&
        getNote () const;

        NoteSequence&
        getNote ();

        void
        setNote (const NoteSequence& s);

        // other
        //
        typedef ::flexisip::Xsd::Rpid::Note_t OtherType;
        typedef ::xsd::cxx::tree::optional< OtherType > OtherOptional;
        typedef ::xsd::cxx::tree::traits< OtherType, char > OtherTraits;

        const OtherOptional&
        getOther () const;

        OtherOptional&
        getOther ();

        void
        setOther (const OtherType& x);

        void
        setOther (const OtherOptional& x);

        void
        setOther (::std::unique_ptr< OtherType > p);

        // any
        //
        typedef ::xsd::cxx::tree::element_sequence AnySequence;
        typedef AnySequence::iterator AnyIterator;
        typedef AnySequence::const_iterator AnyConstIterator;

        const AnySequence&
        getAny () const;

        AnySequence&
        getAny ();

        void
        setAny (const AnySequence& s);

        // from
        //
        typedef ::flexisip::Xsd::XmlSchema::DateTime FromType;
        typedef ::xsd::cxx::tree::optional< FromType > FromOptional;
        typedef ::xsd::cxx::tree::traits< FromType, char > FromTraits;

        const FromOptional&
        getFrom () const;

        FromOptional&
        getFrom ();

        void
        setFrom (const FromType& x);

        void
        setFrom (const FromOptional& x);

        void
        setFrom (::std::unique_ptr< FromType > p);

        // until
        //
        typedef ::flexisip::Xsd::XmlSchema::DateTime UntilType;
        typedef ::xsd::cxx::tree::optional< UntilType > UntilOptional;
        typedef ::xsd::cxx::tree::traits< UntilType, char > UntilTraits;

        const UntilOptional&
        getUntil () const;

        UntilOptional&
        getUntil ();

        void
        setUntil (const UntilType& x);

        void
        setUntil (const UntilOptional& x);

        void
        setUntil (::std::unique_ptr< UntilType > p);

        // id
        //
        typedef ::flexisip::Xsd::XmlSchema::Id IdType;
        typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
        typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

        const IdOptional&
        getId () const;

        IdOptional&
        getId ();

        void
        setId (const IdType& x);

        void
        setId (const IdOptional& x);

        void
        setId (::std::unique_ptr< IdType > p);

        // any_attribute
        //
        typedef ::xsd::cxx::tree::attribute_set< char > AnyAttributeSet;
        typedef AnyAttributeSet::iterator AnyAttributeIterator;
        typedef AnyAttributeSet::const_iterator AnyAttributeConstIterator;

        const AnyAttributeSet&
        getAnyAttribute () const;

        AnyAttributeSet&
        getAnyAttribute ();

        void
        setAnyAttribute (const AnyAttributeSet& s);

        // DOMDocument for wildcard content.
        //
        const ::xercesc::DOMDocument&
        getDomDocument () const;

        ::xercesc::DOMDocument&
        getDomDocument ();

        // Constructors.
        //
        PlaceType ();

        PlaceType (const ::xercesc::DOMElement& e,
                   ::flexisip::Xsd::XmlSchema::Flags f = 0,
                   ::flexisip::Xsd::XmlSchema::Container* c = 0);

        PlaceType (const PlaceType& x,
                   ::flexisip::Xsd::XmlSchema::Flags f = 0,
                   ::flexisip::Xsd::XmlSchema::Container* c = 0);

        virtual PlaceType*
        _clone (::flexisip::Xsd::XmlSchema::Flags f = 0,
                ::flexisip::Xsd::XmlSchema::Container* c = 0) const;

        PlaceType&
        operator= (const PlaceType& x);

        virtual 
        ~PlaceType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::flexisip::Xsd::XmlSchema::Flags);

        protected:
        ::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument > dom_document_;

        NoteSequence note_;
        OtherOptional other_;
        AnySequence any_;
        FromOptional from_;
        UntilOptional until_;
        IdOptional id_;
        AnyAttributeSet any_attribute_;
      };

      class Privacy: public ::flexisip::Xsd::XmlSchema::Type
      {
        public:
        // note
        //
        typedef ::flexisip::Xsd::Rpid::Note_t NoteType;
        typedef ::xsd::cxx::tree::sequence< NoteType > NoteSequence;
        typedef NoteSequence::iterator NoteIterator;
        typedef NoteSequence::const_iterator NoteConstIterator;
        typedef ::xsd::cxx::tree::traits< NoteType, char > NoteTraits;

        const NoteSequence&
        getNote () const;

        NoteSequence&
        getNote ();

        void
        setNote (const NoteSequence& s);

        // unknown
        //
        typedef ::flexisip::Xsd::Rpid::Empty UnknownType;
        typedef ::xsd::cxx::tree::optional< UnknownType > UnknownOptional;
        typedef ::xsd::cxx::tree::traits< UnknownType, char > UnknownTraits;

        const UnknownOptional&
        getUnknown () const;

        UnknownOptional&
        getUnknown ();

        void
        setUnknown (const UnknownType& x);

        void
        setUnknown (const UnknownOptional& x);

        void
        setUnknown (::std::unique_ptr< UnknownType > p);

        // audio
        //
        typedef ::flexisip::Xsd::Rpid::Empty AudioType;
        typedef ::xsd::cxx::tree::optional< AudioType > AudioOptional;
        typedef ::xsd::cxx::tree::traits< AudioType, char > AudioTraits;

        const AudioOptional&
        getAudio () const;

        AudioOptional&
        getAudio ();

        void
        setAudio (const AudioType& x);

        void
        setAudio (const AudioOptional& x);

        void
        setAudio (::std::unique_ptr< AudioType > p);

        // text
        //
        typedef ::flexisip::Xsd::Rpid::Empty TextType;
        typedef ::xsd::cxx::tree::optional< TextType > TextOptional;
        typedef ::xsd::cxx::tree::traits< TextType, char > TextTraits;

        const TextOptional&
        getText () const;

        TextOptional&
        getText ();

        void
        setText (const TextType& x);

        void
        setText (const TextOptional& x);

        void
        setText (::std::unique_ptr< TextType > p);

        // video
        //
        typedef ::flexisip::Xsd::Rpid::Empty VideoType;
        typedef ::xsd::cxx::tree::optional< VideoType > VideoOptional;
        typedef ::xsd::cxx::tree::traits< VideoType, char > VideoTraits;

        const VideoOptional&
        getVideo () const;

        VideoOptional&
        getVideo ();

        void
        setVideo (const VideoType& x);

        void
        setVideo (const VideoOptional& x);

        void
        setVideo (::std::unique_ptr< VideoType > p);

        // any
        //
        typedef ::xsd::cxx::tree::element_sequence AnySequence;
        typedef AnySequence::iterator AnyIterator;
        typedef AnySequence::const_iterator AnyConstIterator;

        const AnySequence&
        getAny () const;

        AnySequence&
        getAny ();

        void
        setAny (const AnySequence& s);

        // from
        //
        typedef ::flexisip::Xsd::XmlSchema::DateTime FromType;
        typedef ::xsd::cxx::tree::optional< FromType > FromOptional;
        typedef ::xsd::cxx::tree::traits< FromType, char > FromTraits;

        const FromOptional&
        getFrom () const;

        FromOptional&
        getFrom ();

        void
        setFrom (const FromType& x);

        void
        setFrom (const FromOptional& x);

        void
        setFrom (::std::unique_ptr< FromType > p);

        // until
        //
        typedef ::flexisip::Xsd::XmlSchema::DateTime UntilType;
        typedef ::xsd::cxx::tree::optional< UntilType > UntilOptional;
        typedef ::xsd::cxx::tree::traits< UntilType, char > UntilTraits;

        const UntilOptional&
        getUntil () const;

        UntilOptional&
        getUntil ();

        void
        setUntil (const UntilType& x);

        void
        setUntil (const UntilOptional& x);

        void
        setUntil (::std::unique_ptr< UntilType > p);

        // id
        //
        typedef ::flexisip::Xsd::XmlSchema::Id IdType;
        typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
        typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

        const IdOptional&
        getId () const;

        IdOptional&
        getId ();

        void
        setId (const IdType& x);

        void
        setId (const IdOptional& x);

        void
        setId (::std::unique_ptr< IdType > p);

        // any_attribute
        //
        typedef ::xsd::cxx::tree::attribute_set< char > AnyAttributeSet;
        typedef AnyAttributeSet::iterator AnyAttributeIterator;
        typedef AnyAttributeSet::const_iterator AnyAttributeConstIterator;

        const AnyAttributeSet&
        getAnyAttribute () const;

        AnyAttributeSet&
        getAnyAttribute ();

        void
        setAnyAttribute (const AnyAttributeSet& s);

        // DOMDocument for wildcard content.
        //
        const ::xercesc::DOMDocument&
        getDomDocument () const;

        ::xercesc::DOMDocument&
        getDomDocument ();

        // Constructors.
        //
        Privacy ();

        Privacy (const ::xercesc::DOMElement& e,
                 ::flexisip::Xsd::XmlSchema::Flags f = 0,
                 ::flexisip::Xsd::XmlSchema::Container* c = 0);

        Privacy (const Privacy& x,
                 ::flexisip::Xsd::XmlSchema::Flags f = 0,
                 ::flexisip::Xsd::XmlSchema::Container* c = 0);

        virtual Privacy*
        _clone (::flexisip::Xsd::XmlSchema::Flags f = 0,
                ::flexisip::Xsd::XmlSchema::Container* c = 0) const;

        Privacy&
        operator= (const Privacy& x);

        virtual 
        ~Privacy ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::flexisip::Xsd::XmlSchema::Flags);

        protected:
        ::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument > dom_document_;

        NoteSequence note_;
        UnknownOptional unknown_;
        AudioOptional audio_;
        TextOptional text_;
        VideoOptional video_;
        AnySequence any_;
        FromOptional from_;
        UntilOptional until_;
        IdOptional id_;
        AnyAttributeSet any_attribute_;
      };

      class Relationship: public ::flexisip::Xsd::XmlSchema::Type
      {
        public:
        // note
        //
        typedef ::flexisip::Xsd::Rpid::Note_t NoteType;
        typedef ::xsd::cxx::tree::sequence< NoteType > NoteSequence;
        typedef NoteSequence::iterator NoteIterator;
        typedef NoteSequence::const_iterator NoteConstIterator;
        typedef ::xsd::cxx::tree::traits< NoteType, char > NoteTraits;

        const NoteSequence&
        getNote () const;

        NoteSequence&
        getNote ();

        void
        setNote (const NoteSequence& s);

        // assistant
        //
        typedef ::flexisip::Xsd::Rpid::Empty AssistantType;
        typedef ::xsd::cxx::tree::optional< AssistantType > AssistantOptional;
        typedef ::xsd::cxx::tree::traits< AssistantType, char > AssistantTraits;

        const AssistantOptional&
        getAssistant () const;

        AssistantOptional&
        getAssistant ();

        void
        setAssistant (const AssistantType& x);

        void
        setAssistant (const AssistantOptional& x);

        void
        setAssistant (::std::unique_ptr< AssistantType > p);

        // associate
        //
        typedef ::flexisip::Xsd::Rpid::Empty AssociateType;
        typedef ::xsd::cxx::tree::optional< AssociateType > AssociateOptional;
        typedef ::xsd::cxx::tree::traits< AssociateType, char > AssociateTraits;

        const AssociateOptional&
        getAssociate () const;

        AssociateOptional&
        getAssociate ();

        void
        setAssociate (const AssociateType& x);

        void
        setAssociate (const AssociateOptional& x);

        void
        setAssociate (::std::unique_ptr< AssociateType > p);

        // family
        //
        typedef ::flexisip::Xsd::Rpid::Empty FamilyType;
        typedef ::xsd::cxx::tree::optional< FamilyType > FamilyOptional;
        typedef ::xsd::cxx::tree::traits< FamilyType, char > FamilyTraits;

        const FamilyOptional&
        getFamily () const;

        FamilyOptional&
        getFamily ();

        void
        setFamily (const FamilyType& x);

        void
        setFamily (const FamilyOptional& x);

        void
        setFamily (::std::unique_ptr< FamilyType > p);

        // friend
        //
        typedef ::flexisip::Xsd::Rpid::Empty FriendType;
        typedef ::xsd::cxx::tree::optional< FriendType > FriendOptional;
        typedef ::xsd::cxx::tree::traits< FriendType, char > FriendTraits;

        const FriendOptional&
        getFriend () const;

        FriendOptional&
        getFriend ();

        void
        setFriend (const FriendType& x);

        void
        setFriend (const FriendOptional& x);

        void
        setFriend (::std::unique_ptr< FriendType > p);

        // other
        //
        typedef ::flexisip::Xsd::Rpid::Note_t OtherType;
        typedef ::xsd::cxx::tree::optional< OtherType > OtherOptional;
        typedef ::xsd::cxx::tree::traits< OtherType, char > OtherTraits;

        const OtherOptional&
        getOther () const;

        OtherOptional&
        getOther ();

        void
        setOther (const OtherType& x);

        void
        setOther (const OtherOptional& x);

        void
        setOther (::std::unique_ptr< OtherType > p);

        // self
        //
        typedef ::flexisip::Xsd::Rpid::Empty SelfType;
        typedef ::xsd::cxx::tree::optional< SelfType > SelfOptional;
        typedef ::xsd::cxx::tree::traits< SelfType, char > SelfTraits;

        const SelfOptional&
        getSelf () const;

        SelfOptional&
        getSelf ();

        void
        setSelf (const SelfType& x);

        void
        setSelf (const SelfOptional& x);

        void
        setSelf (::std::unique_ptr< SelfType > p);

        // supervisor
        //
        typedef ::flexisip::Xsd::Rpid::Empty SupervisorType;
        typedef ::xsd::cxx::tree::optional< SupervisorType > SupervisorOptional;
        typedef ::xsd::cxx::tree::traits< SupervisorType, char > SupervisorTraits;

        const SupervisorOptional&
        getSupervisor () const;

        SupervisorOptional&
        getSupervisor ();

        void
        setSupervisor (const SupervisorType& x);

        void
        setSupervisor (const SupervisorOptional& x);

        void
        setSupervisor (::std::unique_ptr< SupervisorType > p);

        // unknown
        //
        typedef ::flexisip::Xsd::Rpid::Empty UnknownType;
        typedef ::xsd::cxx::tree::optional< UnknownType > UnknownOptional;
        typedef ::xsd::cxx::tree::traits< UnknownType, char > UnknownTraits;

        const UnknownOptional&
        getUnknown () const;

        UnknownOptional&
        getUnknown ();

        void
        setUnknown (const UnknownType& x);

        void
        setUnknown (const UnknownOptional& x);

        void
        setUnknown (::std::unique_ptr< UnknownType > p);

        // any
        //
        typedef ::xsd::cxx::tree::element_sequence AnySequence;
        typedef AnySequence::iterator AnyIterator;
        typedef AnySequence::const_iterator AnyConstIterator;

        const AnySequence&
        getAny () const;

        AnySequence&
        getAny ();

        void
        setAny (const AnySequence& s);

        // DOMDocument for wildcard content.
        //
        const ::xercesc::DOMDocument&
        getDomDocument () const;

        ::xercesc::DOMDocument&
        getDomDocument ();

        // Constructors.
        //
        Relationship ();

        Relationship (const ::xercesc::DOMElement& e,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      ::flexisip::Xsd::XmlSchema::Container* c = 0);

        Relationship (const Relationship& x,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      ::flexisip::Xsd::XmlSchema::Container* c = 0);

        virtual Relationship*
        _clone (::flexisip::Xsd::XmlSchema::Flags f = 0,
                ::flexisip::Xsd::XmlSchema::Container* c = 0) const;

        Relationship&
        operator= (const Relationship& x);

        virtual 
        ~Relationship ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::flexisip::Xsd::XmlSchema::Flags);

        protected:
        ::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument > dom_document_;

        NoteSequence note_;
        AssistantOptional assistant_;
        AssociateOptional associate_;
        FamilyOptional family_;
        FriendOptional friend__;
        OtherOptional other_;
        SelfOptional self_;
        SupervisorOptional supervisor_;
        UnknownOptional unknown_;
        AnySequence any_;
      };

      class ServiceClass: public ::flexisip::Xsd::XmlSchema::Type
      {
        public:
        // note
        //
        typedef ::flexisip::Xsd::Rpid::Note_t NoteType;
        typedef ::xsd::cxx::tree::sequence< NoteType > NoteSequence;
        typedef NoteSequence::iterator NoteIterator;
        typedef NoteSequence::const_iterator NoteConstIterator;
        typedef ::xsd::cxx::tree::traits< NoteType, char > NoteTraits;

        const NoteSequence&
        getNote () const;

        NoteSequence&
        getNote ();

        void
        setNote (const NoteSequence& s);

        // courier
        //
        typedef ::flexisip::Xsd::Rpid::Empty CourierType;
        typedef ::xsd::cxx::tree::optional< CourierType > CourierOptional;
        typedef ::xsd::cxx::tree::traits< CourierType, char > CourierTraits;

        const CourierOptional&
        getCourier () const;

        CourierOptional&
        getCourier ();

        void
        setCourier (const CourierType& x);

        void
        setCourier (const CourierOptional& x);

        void
        setCourier (::std::unique_ptr< CourierType > p);

        // electronic
        //
        typedef ::flexisip::Xsd::Rpid::Empty ElectronicType;
        typedef ::xsd::cxx::tree::optional< ElectronicType > ElectronicOptional;
        typedef ::xsd::cxx::tree::traits< ElectronicType, char > ElectronicTraits;

        const ElectronicOptional&
        getElectronic () const;

        ElectronicOptional&
        getElectronic ();

        void
        setElectronic (const ElectronicType& x);

        void
        setElectronic (const ElectronicOptional& x);

        void
        setElectronic (::std::unique_ptr< ElectronicType > p);

        // freight
        //
        typedef ::flexisip::Xsd::Rpid::Empty FreightType;
        typedef ::xsd::cxx::tree::optional< FreightType > FreightOptional;
        typedef ::xsd::cxx::tree::traits< FreightType, char > FreightTraits;

        const FreightOptional&
        getFreight () const;

        FreightOptional&
        getFreight ();

        void
        setFreight (const FreightType& x);

        void
        setFreight (const FreightOptional& x);

        void
        setFreight (::std::unique_ptr< FreightType > p);

        // in-person
        //
        typedef ::flexisip::Xsd::Rpid::Empty InPersonType;
        typedef ::xsd::cxx::tree::optional< InPersonType > InPersonOptional;
        typedef ::xsd::cxx::tree::traits< InPersonType, char > InPersonTraits;

        const InPersonOptional&
        getInPerson () const;

        InPersonOptional&
        getInPerson ();

        void
        setInPerson (const InPersonType& x);

        void
        setInPerson (const InPersonOptional& x);

        void
        setInPerson (::std::unique_ptr< InPersonType > p);

        // postal
        //
        typedef ::flexisip::Xsd::Rpid::Empty PostalType;
        typedef ::xsd::cxx::tree::optional< PostalType > PostalOptional;
        typedef ::xsd::cxx::tree::traits< PostalType, char > PostalTraits;

        const PostalOptional&
        getPostal () const;

        PostalOptional&
        getPostal ();

        void
        setPostal (const PostalType& x);

        void
        setPostal (const PostalOptional& x);

        void
        setPostal (::std::unique_ptr< PostalType > p);

        // unknown
        //
        typedef ::flexisip::Xsd::Rpid::Empty UnknownType;
        typedef ::xsd::cxx::tree::optional< UnknownType > UnknownOptional;
        typedef ::xsd::cxx::tree::traits< UnknownType, char > UnknownTraits;

        const UnknownOptional&
        getUnknown () const;

        UnknownOptional&
        getUnknown ();

        void
        setUnknown (const UnknownType& x);

        void
        setUnknown (const UnknownOptional& x);

        void
        setUnknown (::std::unique_ptr< UnknownType > p);

        // any
        //
        typedef ::xsd::cxx::tree::element_sequence AnySequence;
        typedef AnySequence::iterator AnyIterator;
        typedef AnySequence::const_iterator AnyConstIterator;

        const AnySequence&
        getAny () const;

        AnySequence&
        getAny ();

        void
        setAny (const AnySequence& s);

        // DOMDocument for wildcard content.
        //
        const ::xercesc::DOMDocument&
        getDomDocument () const;

        ::xercesc::DOMDocument&
        getDomDocument ();

        // Constructors.
        //
        ServiceClass ();

        ServiceClass (const ::xercesc::DOMElement& e,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      ::flexisip::Xsd::XmlSchema::Container* c = 0);

        ServiceClass (const ServiceClass& x,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      ::flexisip::Xsd::XmlSchema::Container* c = 0);

        virtual ServiceClass*
        _clone (::flexisip::Xsd::XmlSchema::Flags f = 0,
                ::flexisip::Xsd::XmlSchema::Container* c = 0) const;

        ServiceClass&
        operator= (const ServiceClass& x);

        virtual 
        ~ServiceClass ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::flexisip::Xsd::XmlSchema::Flags);

        protected:
        ::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument > dom_document_;

        NoteSequence note_;
        CourierOptional courier_;
        ElectronicOptional electronic_;
        FreightOptional freight_;
        InPersonOptional in_person_;
        PostalOptional postal_;
        UnknownOptional unknown_;
        AnySequence any_;
      };

      class Sphere: public ::flexisip::Xsd::XmlSchema::Type
      {
        public:
        // home
        //
        typedef ::flexisip::Xsd::Rpid::Empty HomeType;
        typedef ::xsd::cxx::tree::optional< HomeType > HomeOptional;
        typedef ::xsd::cxx::tree::traits< HomeType, char > HomeTraits;

        const HomeOptional&
        getHome () const;

        HomeOptional&
        getHome ();

        void
        setHome (const HomeType& x);

        void
        setHome (const HomeOptional& x);

        void
        setHome (::std::unique_ptr< HomeType > p);

        // work
        //
        typedef ::flexisip::Xsd::Rpid::Empty WorkType;
        typedef ::xsd::cxx::tree::optional< WorkType > WorkOptional;
        typedef ::xsd::cxx::tree::traits< WorkType, char > WorkTraits;

        const WorkOptional&
        getWork () const;

        WorkOptional&
        getWork ();

        void
        setWork (const WorkType& x);

        void
        setWork (const WorkOptional& x);

        void
        setWork (::std::unique_ptr< WorkType > p);

        // unknown
        //
        typedef ::flexisip::Xsd::Rpid::Empty UnknownType;
        typedef ::xsd::cxx::tree::optional< UnknownType > UnknownOptional;
        typedef ::xsd::cxx::tree::traits< UnknownType, char > UnknownTraits;

        const UnknownOptional&
        getUnknown () const;

        UnknownOptional&
        getUnknown ();

        void
        setUnknown (const UnknownType& x);

        void
        setUnknown (const UnknownOptional& x);

        void
        setUnknown (::std::unique_ptr< UnknownType > p);

        // any
        //
        typedef ::xsd::cxx::tree::element_sequence AnySequence;
        typedef AnySequence::iterator AnyIterator;
        typedef AnySequence::const_iterator AnyConstIterator;

        const AnySequence&
        getAny () const;

        AnySequence&
        getAny ();

        void
        setAny (const AnySequence& s);

        // from
        //
        typedef ::flexisip::Xsd::XmlSchema::DateTime FromType;
        typedef ::xsd::cxx::tree::optional< FromType > FromOptional;
        typedef ::xsd::cxx::tree::traits< FromType, char > FromTraits;

        const FromOptional&
        getFrom () const;

        FromOptional&
        getFrom ();

        void
        setFrom (const FromType& x);

        void
        setFrom (const FromOptional& x);

        void
        setFrom (::std::unique_ptr< FromType > p);

        // until
        //
        typedef ::flexisip::Xsd::XmlSchema::DateTime UntilType;
        typedef ::xsd::cxx::tree::optional< UntilType > UntilOptional;
        typedef ::xsd::cxx::tree::traits< UntilType, char > UntilTraits;

        const UntilOptional&
        getUntil () const;

        UntilOptional&
        getUntil ();

        void
        setUntil (const UntilType& x);

        void
        setUntil (const UntilOptional& x);

        void
        setUntil (::std::unique_ptr< UntilType > p);

        // id
        //
        typedef ::flexisip::Xsd::XmlSchema::Id IdType;
        typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
        typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

        const IdOptional&
        getId () const;

        IdOptional&
        getId ();

        void
        setId (const IdType& x);

        void
        setId (const IdOptional& x);

        void
        setId (::std::unique_ptr< IdType > p);

        // any_attribute
        //
        typedef ::xsd::cxx::tree::attribute_set< char > AnyAttributeSet;
        typedef AnyAttributeSet::iterator AnyAttributeIterator;
        typedef AnyAttributeSet::const_iterator AnyAttributeConstIterator;

        const AnyAttributeSet&
        getAnyAttribute () const;

        AnyAttributeSet&
        getAnyAttribute ();

        void
        setAnyAttribute (const AnyAttributeSet& s);

        // DOMDocument for wildcard content.
        //
        const ::xercesc::DOMDocument&
        getDomDocument () const;

        ::xercesc::DOMDocument&
        getDomDocument ();

        // Constructors.
        //
        Sphere ();

        Sphere (const ::xercesc::DOMElement& e,
                ::flexisip::Xsd::XmlSchema::Flags f = 0,
                ::flexisip::Xsd::XmlSchema::Container* c = 0);

        Sphere (const Sphere& x,
                ::flexisip::Xsd::XmlSchema::Flags f = 0,
                ::flexisip::Xsd::XmlSchema::Container* c = 0);

        virtual Sphere*
        _clone (::flexisip::Xsd::XmlSchema::Flags f = 0,
                ::flexisip::Xsd::XmlSchema::Container* c = 0) const;

        Sphere&
        operator= (const Sphere& x);

        virtual 
        ~Sphere ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::flexisip::Xsd::XmlSchema::Flags);

        protected:
        ::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument > dom_document_;

        HomeOptional home_;
        WorkOptional work_;
        UnknownOptional unknown_;
        AnySequence any_;
        FromOptional from_;
        UntilOptional until_;
        IdOptional id_;
        AnyAttributeSet any_attribute_;
      };

      class StatusIcon: public ::flexisip::Xsd::XmlSchema::Uri
      {
        public:
        // from
        //
        typedef ::flexisip::Xsd::XmlSchema::DateTime FromType;
        typedef ::xsd::cxx::tree::optional< FromType > FromOptional;
        typedef ::xsd::cxx::tree::traits< FromType, char > FromTraits;

        const FromOptional&
        getFrom () const;

        FromOptional&
        getFrom ();

        void
        setFrom (const FromType& x);

        void
        setFrom (const FromOptional& x);

        void
        setFrom (::std::unique_ptr< FromType > p);

        // until
        //
        typedef ::flexisip::Xsd::XmlSchema::DateTime UntilType;
        typedef ::xsd::cxx::tree::optional< UntilType > UntilOptional;
        typedef ::xsd::cxx::tree::traits< UntilType, char > UntilTraits;

        const UntilOptional&
        getUntil () const;

        UntilOptional&
        getUntil ();

        void
        setUntil (const UntilType& x);

        void
        setUntil (const UntilOptional& x);

        void
        setUntil (::std::unique_ptr< UntilType > p);

        // id
        //
        typedef ::flexisip::Xsd::XmlSchema::Id IdType;
        typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
        typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

        const IdOptional&
        getId () const;

        IdOptional&
        getId ();

        void
        setId (const IdType& x);

        void
        setId (const IdOptional& x);

        void
        setId (::std::unique_ptr< IdType > p);

        // any_attribute
        //
        typedef ::xsd::cxx::tree::attribute_set< char > AnyAttributeSet;
        typedef AnyAttributeSet::iterator AnyAttributeIterator;
        typedef AnyAttributeSet::const_iterator AnyAttributeConstIterator;

        const AnyAttributeSet&
        getAnyAttribute () const;

        AnyAttributeSet&
        getAnyAttribute ();

        void
        setAnyAttribute (const AnyAttributeSet& s);

        // DOMDocument for wildcard content.
        //
        const ::xercesc::DOMDocument&
        getDomDocument () const;

        ::xercesc::DOMDocument&
        getDomDocument ();

        // Constructors.
        //
        StatusIcon (const ::flexisip::Xsd::XmlSchema::Uri&);

        StatusIcon (const ::xercesc::DOMElement& e,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    ::flexisip::Xsd::XmlSchema::Container* c = 0);

        StatusIcon (const StatusIcon& x,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    ::flexisip::Xsd::XmlSchema::Container* c = 0);

        virtual StatusIcon*
        _clone (::flexisip::Xsd::XmlSchema::Flags f = 0,
                ::flexisip::Xsd::XmlSchema::Container* c = 0) const;

        StatusIcon&
        operator= (const StatusIcon& x);

        virtual 
        ~StatusIcon ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::flexisip::Xsd::XmlSchema::Flags);

        protected:
        ::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument > dom_document_;

        FromOptional from_;
        UntilOptional until_;
        IdOptional id_;
        AnyAttributeSet any_attribute_;
      };

      class TimeOffset: public ::xsd::cxx::tree::fundamental_base< ::flexisip::Xsd::XmlSchema::Integer, char, ::flexisip::Xsd::XmlSchema::SimpleType >
      {
        public:
        // from
        //
        typedef ::flexisip::Xsd::XmlSchema::DateTime FromType;
        typedef ::xsd::cxx::tree::optional< FromType > FromOptional;
        typedef ::xsd::cxx::tree::traits< FromType, char > FromTraits;

        const FromOptional&
        getFrom () const;

        FromOptional&
        getFrom ();

        void
        setFrom (const FromType& x);

        void
        setFrom (const FromOptional& x);

        void
        setFrom (::std::unique_ptr< FromType > p);

        // until
        //
        typedef ::flexisip::Xsd::XmlSchema::DateTime UntilType;
        typedef ::xsd::cxx::tree::optional< UntilType > UntilOptional;
        typedef ::xsd::cxx::tree::traits< UntilType, char > UntilTraits;

        const UntilOptional&
        getUntil () const;

        UntilOptional&
        getUntil ();

        void
        setUntil (const UntilType& x);

        void
        setUntil (const UntilOptional& x);

        void
        setUntil (::std::unique_ptr< UntilType > p);

        // description
        //
        typedef ::flexisip::Xsd::XmlSchema::String DescriptionType;
        typedef ::xsd::cxx::tree::optional< DescriptionType > DescriptionOptional;
        typedef ::xsd::cxx::tree::traits< DescriptionType, char > DescriptionTraits;

        const DescriptionOptional&
        getDescription () const;

        DescriptionOptional&
        getDescription ();

        void
        setDescription (const DescriptionType& x);

        void
        setDescription (const DescriptionOptional& x);

        void
        setDescription (::std::unique_ptr< DescriptionType > p);

        // id
        //
        typedef ::flexisip::Xsd::XmlSchema::Id IdType;
        typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
        typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

        const IdOptional&
        getId () const;

        IdOptional&
        getId ();

        void
        setId (const IdType& x);

        void
        setId (const IdOptional& x);

        void
        setId (::std::unique_ptr< IdType > p);

        // any_attribute
        //
        typedef ::xsd::cxx::tree::attribute_set< char > AnyAttributeSet;
        typedef AnyAttributeSet::iterator AnyAttributeIterator;
        typedef AnyAttributeSet::const_iterator AnyAttributeConstIterator;

        const AnyAttributeSet&
        getAnyAttribute () const;

        AnyAttributeSet&
        getAnyAttribute ();

        void
        setAnyAttribute (const AnyAttributeSet& s);

        // DOMDocument for wildcard content.
        //
        const ::xercesc::DOMDocument&
        getDomDocument () const;

        ::xercesc::DOMDocument&
        getDomDocument ();

        // Constructors.
        //
        TimeOffset (const ::flexisip::Xsd::XmlSchema::Integer&);

        TimeOffset (const ::xercesc::DOMElement& e,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    ::flexisip::Xsd::XmlSchema::Container* c = 0);

        TimeOffset (const TimeOffset& x,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    ::flexisip::Xsd::XmlSchema::Container* c = 0);

        virtual TimeOffset*
        _clone (::flexisip::Xsd::XmlSchema::Flags f = 0,
                ::flexisip::Xsd::XmlSchema::Container* c = 0) const;

        TimeOffset&
        operator= (const TimeOffset& x);

        virtual 
        ~TimeOffset ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::flexisip::Xsd::XmlSchema::Flags);

        protected:
        ::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument > dom_document_;

        FromOptional from_;
        UntilOptional until_;
        DescriptionOptional description_;
        IdOptional id_;
        AnyAttributeSet any_attribute_;
      };

      class UserInput: public ::flexisip::Xsd::Rpid::ActiveIdle
      {
        public:
        // idle-threshold
        //
        typedef ::flexisip::Xsd::XmlSchema::PositiveInteger IdleThresholdType;
        typedef ::xsd::cxx::tree::optional< IdleThresholdType > IdleThresholdOptional;
        typedef ::xsd::cxx::tree::traits< IdleThresholdType, char > IdleThresholdTraits;

        const IdleThresholdOptional&
        getIdleThreshold () const;

        IdleThresholdOptional&
        getIdleThreshold ();

        void
        setIdleThreshold (const IdleThresholdType& x);

        void
        setIdleThreshold (const IdleThresholdOptional& x);

        // last-input
        //
        typedef ::flexisip::Xsd::XmlSchema::DateTime LastInputType;
        typedef ::xsd::cxx::tree::optional< LastInputType > LastInputOptional;
        typedef ::xsd::cxx::tree::traits< LastInputType, char > LastInputTraits;

        const LastInputOptional&
        getLastInput () const;

        LastInputOptional&
        getLastInput ();

        void
        setLastInput (const LastInputType& x);

        void
        setLastInput (const LastInputOptional& x);

        void
        setLastInput (::std::unique_ptr< LastInputType > p);

        // id
        //
        typedef ::flexisip::Xsd::XmlSchema::Id IdType;
        typedef ::xsd::cxx::tree::optional< IdType > IdOptional;
        typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

        const IdOptional&
        getId () const;

        IdOptional&
        getId ();

        void
        setId (const IdType& x);

        void
        setId (const IdOptional& x);

        void
        setId (::std::unique_ptr< IdType > p);

        // any_attribute
        //
        typedef ::xsd::cxx::tree::attribute_set< char > AnyAttributeSet;
        typedef AnyAttributeSet::iterator AnyAttributeIterator;
        typedef AnyAttributeSet::const_iterator AnyAttributeConstIterator;

        const AnyAttributeSet&
        getAnyAttribute () const;

        AnyAttributeSet&
        getAnyAttribute ();

        void
        setAnyAttribute (const AnyAttributeSet& s);

        // DOMDocument for wildcard content.
        //
        const ::xercesc::DOMDocument&
        getDomDocument () const;

        ::xercesc::DOMDocument&
        getDomDocument ();

        // Constructors.
        //
        UserInput (::flexisip::Xsd::Rpid::ActiveIdle::Value);

        UserInput (const char*);

        UserInput (const ::std::string&);

        UserInput (const ::flexisip::Xsd::Rpid::ActiveIdle&);

        UserInput (const ::xercesc::DOMElement& e,
                   ::flexisip::Xsd::XmlSchema::Flags f = 0,
                   ::flexisip::Xsd::XmlSchema::Container* c = 0);

        UserInput (const UserInput& x,
                   ::flexisip::Xsd::XmlSchema::Flags f = 0,
                   ::flexisip::Xsd::XmlSchema::Container* c = 0);

        virtual UserInput*
        _clone (::flexisip::Xsd::XmlSchema::Flags f = 0,
                ::flexisip::Xsd::XmlSchema::Container* c = 0) const;

        UserInput&
        operator= (const UserInput& x);

        virtual 
        ~UserInput ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::flexisip::Xsd::XmlSchema::Flags);

        protected:
        ::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument > dom_document_;

        IdleThresholdOptional idle_threshold_;
        LastInputOptional last_input_;
        IdOptional id_;
        AnyAttributeSet any_attribute_;
      };

      class Audio: public ::flexisip::Xsd::XmlSchema::Type
      {
        public:
        // noisy
        //
        typedef ::flexisip::Xsd::Rpid::Empty NoisyType;
        typedef ::xsd::cxx::tree::optional< NoisyType > NoisyOptional;
        typedef ::xsd::cxx::tree::traits< NoisyType, char > NoisyTraits;

        const NoisyOptional&
        getNoisy () const;

        NoisyOptional&
        getNoisy ();

        void
        setNoisy (const NoisyType& x);

        void
        setNoisy (const NoisyOptional& x);

        void
        setNoisy (::std::unique_ptr< NoisyType > p);

        // ok
        //
        typedef ::flexisip::Xsd::Rpid::Empty OkType;
        typedef ::xsd::cxx::tree::optional< OkType > OkOptional;
        typedef ::xsd::cxx::tree::traits< OkType, char > OkTraits;

        const OkOptional&
        getOk () const;

        OkOptional&
        getOk ();

        void
        setOk (const OkType& x);

        void
        setOk (const OkOptional& x);

        void
        setOk (::std::unique_ptr< OkType > p);

        // quiet
        //
        typedef ::flexisip::Xsd::Rpid::Empty QuietType;
        typedef ::xsd::cxx::tree::optional< QuietType > QuietOptional;
        typedef ::xsd::cxx::tree::traits< QuietType, char > QuietTraits;

        const QuietOptional&
        getQuiet () const;

        QuietOptional&
        getQuiet ();

        void
        setQuiet (const QuietType& x);

        void
        setQuiet (const QuietOptional& x);

        void
        setQuiet (::std::unique_ptr< QuietType > p);

        // unknown
        //
        typedef ::flexisip::Xsd::Rpid::Empty UnknownType;
        typedef ::xsd::cxx::tree::optional< UnknownType > UnknownOptional;
        typedef ::xsd::cxx::tree::traits< UnknownType, char > UnknownTraits;

        const UnknownOptional&
        getUnknown () const;

        UnknownOptional&
        getUnknown ();

        void
        setUnknown (const UnknownType& x);

        void
        setUnknown (const UnknownOptional& x);

        void
        setUnknown (::std::unique_ptr< UnknownType > p);

        // Constructors.
        //
        Audio ();

        Audio (const ::xercesc::DOMElement& e,
               ::flexisip::Xsd::XmlSchema::Flags f = 0,
               ::flexisip::Xsd::XmlSchema::Container* c = 0);

        Audio (const Audio& x,
               ::flexisip::Xsd::XmlSchema::Flags f = 0,
               ::flexisip::Xsd::XmlSchema::Container* c = 0);

        virtual Audio*
        _clone (::flexisip::Xsd::XmlSchema::Flags f = 0,
                ::flexisip::Xsd::XmlSchema::Container* c = 0) const;

        Audio&
        operator= (const Audio& x);

        virtual 
        ~Audio ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::flexisip::Xsd::XmlSchema::Flags);

        protected:
        NoisyOptional noisy_;
        OkOptional ok_;
        QuietOptional quiet_;
        UnknownOptional unknown_;
      };

      class Video: public ::flexisip::Xsd::XmlSchema::Type
      {
        public:
        // toobright
        //
        typedef ::flexisip::Xsd::Rpid::Empty ToobrightType;
        typedef ::xsd::cxx::tree::optional< ToobrightType > ToobrightOptional;
        typedef ::xsd::cxx::tree::traits< ToobrightType, char > ToobrightTraits;

        const ToobrightOptional&
        getToobright () const;

        ToobrightOptional&
        getToobright ();

        void
        setToobright (const ToobrightType& x);

        void
        setToobright (const ToobrightOptional& x);

        void
        setToobright (::std::unique_ptr< ToobrightType > p);

        // ok
        //
        typedef ::flexisip::Xsd::Rpid::Empty OkType;
        typedef ::xsd::cxx::tree::optional< OkType > OkOptional;
        typedef ::xsd::cxx::tree::traits< OkType, char > OkTraits;

        const OkOptional&
        getOk () const;

        OkOptional&
        getOk ();

        void
        setOk (const OkType& x);

        void
        setOk (const OkOptional& x);

        void
        setOk (::std::unique_ptr< OkType > p);

        // dark
        //
        typedef ::flexisip::Xsd::Rpid::Empty DarkType;
        typedef ::xsd::cxx::tree::optional< DarkType > DarkOptional;
        typedef ::xsd::cxx::tree::traits< DarkType, char > DarkTraits;

        const DarkOptional&
        getDark () const;

        DarkOptional&
        getDark ();

        void
        setDark (const DarkType& x);

        void
        setDark (const DarkOptional& x);

        void
        setDark (::std::unique_ptr< DarkType > p);

        // unknown
        //
        typedef ::flexisip::Xsd::Rpid::Empty UnknownType;
        typedef ::xsd::cxx::tree::optional< UnknownType > UnknownOptional;
        typedef ::xsd::cxx::tree::traits< UnknownType, char > UnknownTraits;

        const UnknownOptional&
        getUnknown () const;

        UnknownOptional&
        getUnknown ();

        void
        setUnknown (const UnknownType& x);

        void
        setUnknown (const UnknownOptional& x);

        void
        setUnknown (::std::unique_ptr< UnknownType > p);

        // Constructors.
        //
        Video ();

        Video (const ::xercesc::DOMElement& e,
               ::flexisip::Xsd::XmlSchema::Flags f = 0,
               ::flexisip::Xsd::XmlSchema::Container* c = 0);

        Video (const Video& x,
               ::flexisip::Xsd::XmlSchema::Flags f = 0,
               ::flexisip::Xsd::XmlSchema::Container* c = 0);

        virtual Video*
        _clone (::flexisip::Xsd::XmlSchema::Flags f = 0,
                ::flexisip::Xsd::XmlSchema::Container* c = 0) const;

        Video&
        operator= (const Video& x);

        virtual 
        ~Video ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::flexisip::Xsd::XmlSchema::Flags);

        protected:
        ToobrightOptional toobright_;
        OkOptional ok_;
        DarkOptional dark_;
        UnknownOptional unknown_;
      };

      class Text: public ::flexisip::Xsd::XmlSchema::Type
      {
        public:
        // uncomfortable
        //
        typedef ::flexisip::Xsd::Rpid::Empty UncomfortableType;
        typedef ::xsd::cxx::tree::optional< UncomfortableType > UncomfortableOptional;
        typedef ::xsd::cxx::tree::traits< UncomfortableType, char > UncomfortableTraits;

        const UncomfortableOptional&
        getUncomfortable () const;

        UncomfortableOptional&
        getUncomfortable ();

        void
        setUncomfortable (const UncomfortableType& x);

        void
        setUncomfortable (const UncomfortableOptional& x);

        void
        setUncomfortable (::std::unique_ptr< UncomfortableType > p);

        // inappropriate
        //
        typedef ::flexisip::Xsd::Rpid::Empty InappropriateType;
        typedef ::xsd::cxx::tree::optional< InappropriateType > InappropriateOptional;
        typedef ::xsd::cxx::tree::traits< InappropriateType, char > InappropriateTraits;

        const InappropriateOptional&
        getInappropriate () const;

        InappropriateOptional&
        getInappropriate ();

        void
        setInappropriate (const InappropriateType& x);

        void
        setInappropriate (const InappropriateOptional& x);

        void
        setInappropriate (::std::unique_ptr< InappropriateType > p);

        // ok
        //
        typedef ::flexisip::Xsd::Rpid::Empty OkType;
        typedef ::xsd::cxx::tree::optional< OkType > OkOptional;
        typedef ::xsd::cxx::tree::traits< OkType, char > OkTraits;

        const OkOptional&
        getOk () const;

        OkOptional&
        getOk ();

        void
        setOk (const OkType& x);

        void
        setOk (const OkOptional& x);

        void
        setOk (::std::unique_ptr< OkType > p);

        // unknown
        //
        typedef ::flexisip::Xsd::Rpid::Empty UnknownType;
        typedef ::xsd::cxx::tree::optional< UnknownType > UnknownOptional;
        typedef ::xsd::cxx::tree::traits< UnknownType, char > UnknownTraits;

        const UnknownOptional&
        getUnknown () const;

        UnknownOptional&
        getUnknown ();

        void
        setUnknown (const UnknownType& x);

        void
        setUnknown (const UnknownOptional& x);

        void
        setUnknown (::std::unique_ptr< UnknownType > p);

        // Constructors.
        //
        Text ();

        Text (const ::xercesc::DOMElement& e,
              ::flexisip::Xsd::XmlSchema::Flags f = 0,
              ::flexisip::Xsd::XmlSchema::Container* c = 0);

        Text (const Text& x,
              ::flexisip::Xsd::XmlSchema::Flags f = 0,
              ::flexisip::Xsd::XmlSchema::Container* c = 0);

        virtual Text*
        _clone (::flexisip::Xsd::XmlSchema::Flags f = 0,
                ::flexisip::Xsd::XmlSchema::Container* c = 0) const;

        Text&
        operator= (const Text& x);

        virtual 
        ~Text ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::flexisip::Xsd::XmlSchema::Flags);

        protected:
        UncomfortableOptional uncomfortable_;
        InappropriateOptional inappropriate_;
        OkOptional ok_;
        UnknownOptional unknown_;
      };
    }
  }
}

#include <iosfwd>

namespace flexisip
{
  namespace Xsd
  {
    namespace Rpid
    {
      ::std::ostream&
      operator<< (::std::ostream&, const Timestamp_t&);

      ::std::ostream&
      operator<< (::std::ostream&, const DeviceID_t&);

      ::std::ostream&
      operator<< (::std::ostream&, const Note_t&);

      ::std::ostream&
      operator<< (::std::ostream&, const Empty&);
    }
  }
}

namespace flexisip
{
  namespace Xsd
  {
    namespace Rpid
    {
      ::std::ostream&
      operator<< (::std::ostream&, ActiveIdle::Value);

      ::std::ostream&
      operator<< (::std::ostream&, const ActiveIdle&);

      ::std::ostream&
      operator<< (::std::ostream&, const Activities&);

      ::std::ostream&
      operator<< (::std::ostream&, const Mood&);

      ::std::ostream&
      operator<< (::std::ostream&, const PlaceIs&);

      ::std::ostream&
      operator<< (::std::ostream&, const PlaceType&);

      ::std::ostream&
      operator<< (::std::ostream&, const Privacy&);

      ::std::ostream&
      operator<< (::std::ostream&, const Relationship&);

      ::std::ostream&
      operator<< (::std::ostream&, const ServiceClass&);

      ::std::ostream&
      operator<< (::std::ostream&, const Sphere&);

      ::std::ostream&
      operator<< (::std::ostream&, const StatusIcon&);

      ::std::ostream&
      operator<< (::std::ostream&, const TimeOffset&);

      ::std::ostream&
      operator<< (::std::ostream&, const UserInput&);

      ::std::ostream&
      operator<< (::std::ostream&, const Audio&);

      ::std::ostream&
      operator<< (::std::ostream&, const Video&);

      ::std::ostream&
      operator<< (::std::ostream&, const Text&);
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace flexisip
{
  namespace Xsd
  {
    namespace Rpid
    {
    }
  }
}

namespace flexisip
{
  namespace Xsd
  {
    namespace Rpid
    {
      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Activities >
      parseActivities (const ::std::string& uri,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Activities >
      parseActivities (const ::std::string& uri,
                       ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Activities >
      parseActivities (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Activities >
      parseActivities (::std::istream& is,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Activities >
      parseActivities (::std::istream& is,
                       ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Activities >
      parseActivities (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Activities >
      parseActivities (::std::istream& is,
                       const ::std::string& id,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Activities >
      parseActivities (::std::istream& is,
                       const ::std::string& id,
                       ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Activities >
      parseActivities (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Activities >
      parseActivities (::xercesc::InputSource& is,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Activities >
      parseActivities (::xercesc::InputSource& is,
                       ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Activities >
      parseActivities (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Activities >
      parseActivities (const ::xercesc::DOMDocument& d,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Activities >
      parseActivities (::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::flexisip::Xsd::XmlSchema::Token >
      parseClass (const ::std::string& uri,
                  ::flexisip::Xsd::XmlSchema::Flags f = 0,
                  const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::XmlSchema::Token >
      parseClass (const ::std::string& uri,
                  ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                  ::flexisip::Xsd::XmlSchema::Flags f = 0,
                  const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::XmlSchema::Token >
      parseClass (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::flexisip::Xsd::XmlSchema::Flags f = 0,
                  const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::flexisip::Xsd::XmlSchema::Token >
      parseClass (::std::istream& is,
                  ::flexisip::Xsd::XmlSchema::Flags f = 0,
                  const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::XmlSchema::Token >
      parseClass (::std::istream& is,
                  ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                  ::flexisip::Xsd::XmlSchema::Flags f = 0,
                  const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::XmlSchema::Token >
      parseClass (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::flexisip::Xsd::XmlSchema::Flags f = 0,
                  const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::XmlSchema::Token >
      parseClass (::std::istream& is,
                  const ::std::string& id,
                  ::flexisip::Xsd::XmlSchema::Flags f = 0,
                  const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::XmlSchema::Token >
      parseClass (::std::istream& is,
                  const ::std::string& id,
                  ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                  ::flexisip::Xsd::XmlSchema::Flags f = 0,
                  const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::XmlSchema::Token >
      parseClass (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::flexisip::Xsd::XmlSchema::Flags f = 0,
                  const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::flexisip::Xsd::XmlSchema::Token >
      parseClass (::xercesc::InputSource& is,
                  ::flexisip::Xsd::XmlSchema::Flags f = 0,
                  const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::XmlSchema::Token >
      parseClass (::xercesc::InputSource& is,
                  ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                  ::flexisip::Xsd::XmlSchema::Flags f = 0,
                  const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::XmlSchema::Token >
      parseClass (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::flexisip::Xsd::XmlSchema::Flags f = 0,
                  const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::flexisip::Xsd::XmlSchema::Token >
      parseClass (const ::xercesc::DOMDocument& d,
                  ::flexisip::Xsd::XmlSchema::Flags f = 0,
                  const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::XmlSchema::Token >
      parseClass (::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                  ::flexisip::Xsd::XmlSchema::Flags f = 0,
                  const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Mood >
      parseMood (const ::std::string& uri,
                 ::flexisip::Xsd::XmlSchema::Flags f = 0,
                 const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Mood >
      parseMood (const ::std::string& uri,
                 ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                 ::flexisip::Xsd::XmlSchema::Flags f = 0,
                 const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Mood >
      parseMood (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::flexisip::Xsd::XmlSchema::Flags f = 0,
                 const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Mood >
      parseMood (::std::istream& is,
                 ::flexisip::Xsd::XmlSchema::Flags f = 0,
                 const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Mood >
      parseMood (::std::istream& is,
                 ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                 ::flexisip::Xsd::XmlSchema::Flags f = 0,
                 const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Mood >
      parseMood (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::flexisip::Xsd::XmlSchema::Flags f = 0,
                 const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Mood >
      parseMood (::std::istream& is,
                 const ::std::string& id,
                 ::flexisip::Xsd::XmlSchema::Flags f = 0,
                 const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Mood >
      parseMood (::std::istream& is,
                 const ::std::string& id,
                 ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                 ::flexisip::Xsd::XmlSchema::Flags f = 0,
                 const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Mood >
      parseMood (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::flexisip::Xsd::XmlSchema::Flags f = 0,
                 const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Mood >
      parseMood (::xercesc::InputSource& is,
                 ::flexisip::Xsd::XmlSchema::Flags f = 0,
                 const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Mood >
      parseMood (::xercesc::InputSource& is,
                 ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                 ::flexisip::Xsd::XmlSchema::Flags f = 0,
                 const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Mood >
      parseMood (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::flexisip::Xsd::XmlSchema::Flags f = 0,
                 const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Mood >
      parseMood (const ::xercesc::DOMDocument& d,
                 ::flexisip::Xsd::XmlSchema::Flags f = 0,
                 const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Mood >
      parseMood (::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                 ::flexisip::Xsd::XmlSchema::Flags f = 0,
                 const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceIs >
      parsePlaceIs (const ::std::string& uri,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceIs >
      parsePlaceIs (const ::std::string& uri,
                    ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceIs >
      parsePlaceIs (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceIs >
      parsePlaceIs (::std::istream& is,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceIs >
      parsePlaceIs (::std::istream& is,
                    ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceIs >
      parsePlaceIs (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceIs >
      parsePlaceIs (::std::istream& is,
                    const ::std::string& id,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceIs >
      parsePlaceIs (::std::istream& is,
                    const ::std::string& id,
                    ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceIs >
      parsePlaceIs (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceIs >
      parsePlaceIs (::xercesc::InputSource& is,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceIs >
      parsePlaceIs (::xercesc::InputSource& is,
                    ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceIs >
      parsePlaceIs (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceIs >
      parsePlaceIs (const ::xercesc::DOMDocument& d,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceIs >
      parsePlaceIs (::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceType >
      parsePlaceType (const ::std::string& uri,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceType >
      parsePlaceType (const ::std::string& uri,
                      ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceType >
      parsePlaceType (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceType >
      parsePlaceType (::std::istream& is,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceType >
      parsePlaceType (::std::istream& is,
                      ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceType >
      parsePlaceType (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceType >
      parsePlaceType (::std::istream& is,
                      const ::std::string& id,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceType >
      parsePlaceType (::std::istream& is,
                      const ::std::string& id,
                      ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceType >
      parsePlaceType (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceType >
      parsePlaceType (::xercesc::InputSource& is,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceType >
      parsePlaceType (::xercesc::InputSource& is,
                      ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceType >
      parsePlaceType (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceType >
      parsePlaceType (const ::xercesc::DOMDocument& d,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::PlaceType >
      parsePlaceType (::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Privacy >
      parsePrivacy (const ::std::string& uri,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Privacy >
      parsePrivacy (const ::std::string& uri,
                    ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Privacy >
      parsePrivacy (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Privacy >
      parsePrivacy (::std::istream& is,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Privacy >
      parsePrivacy (::std::istream& is,
                    ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Privacy >
      parsePrivacy (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Privacy >
      parsePrivacy (::std::istream& is,
                    const ::std::string& id,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Privacy >
      parsePrivacy (::std::istream& is,
                    const ::std::string& id,
                    ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Privacy >
      parsePrivacy (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Privacy >
      parsePrivacy (::xercesc::InputSource& is,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Privacy >
      parsePrivacy (::xercesc::InputSource& is,
                    ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Privacy >
      parsePrivacy (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Privacy >
      parsePrivacy (const ::xercesc::DOMDocument& d,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Privacy >
      parsePrivacy (::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::flexisip::Xsd::XmlSchema::Flags f = 0,
                    const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Relationship >
      parseRelationship (const ::std::string& uri,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Relationship >
      parseRelationship (const ::std::string& uri,
                         ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Relationship >
      parseRelationship (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Relationship >
      parseRelationship (::std::istream& is,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Relationship >
      parseRelationship (::std::istream& is,
                         ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Relationship >
      parseRelationship (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Relationship >
      parseRelationship (::std::istream& is,
                         const ::std::string& id,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Relationship >
      parseRelationship (::std::istream& is,
                         const ::std::string& id,
                         ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Relationship >
      parseRelationship (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Relationship >
      parseRelationship (::xercesc::InputSource& is,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Relationship >
      parseRelationship (::xercesc::InputSource& is,
                         ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Relationship >
      parseRelationship (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Relationship >
      parseRelationship (const ::xercesc::DOMDocument& d,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Relationship >
      parseRelationship (::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::ServiceClass >
      parseServiceClass (const ::std::string& uri,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::ServiceClass >
      parseServiceClass (const ::std::string& uri,
                         ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::ServiceClass >
      parseServiceClass (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::ServiceClass >
      parseServiceClass (::std::istream& is,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::ServiceClass >
      parseServiceClass (::std::istream& is,
                         ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::ServiceClass >
      parseServiceClass (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::ServiceClass >
      parseServiceClass (::std::istream& is,
                         const ::std::string& id,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::ServiceClass >
      parseServiceClass (::std::istream& is,
                         const ::std::string& id,
                         ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::ServiceClass >
      parseServiceClass (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::ServiceClass >
      parseServiceClass (::xercesc::InputSource& is,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::ServiceClass >
      parseServiceClass (::xercesc::InputSource& is,
                         ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::ServiceClass >
      parseServiceClass (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::ServiceClass >
      parseServiceClass (const ::xercesc::DOMDocument& d,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::ServiceClass >
      parseServiceClass (::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                         ::flexisip::Xsd::XmlSchema::Flags f = 0,
                         const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Sphere >
      parseSphere (const ::std::string& uri,
                   ::flexisip::Xsd::XmlSchema::Flags f = 0,
                   const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Sphere >
      parseSphere (const ::std::string& uri,
                   ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                   ::flexisip::Xsd::XmlSchema::Flags f = 0,
                   const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Sphere >
      parseSphere (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::flexisip::Xsd::XmlSchema::Flags f = 0,
                   const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Sphere >
      parseSphere (::std::istream& is,
                   ::flexisip::Xsd::XmlSchema::Flags f = 0,
                   const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Sphere >
      parseSphere (::std::istream& is,
                   ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                   ::flexisip::Xsd::XmlSchema::Flags f = 0,
                   const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Sphere >
      parseSphere (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::flexisip::Xsd::XmlSchema::Flags f = 0,
                   const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Sphere >
      parseSphere (::std::istream& is,
                   const ::std::string& id,
                   ::flexisip::Xsd::XmlSchema::Flags f = 0,
                   const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Sphere >
      parseSphere (::std::istream& is,
                   const ::std::string& id,
                   ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                   ::flexisip::Xsd::XmlSchema::Flags f = 0,
                   const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Sphere >
      parseSphere (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::flexisip::Xsd::XmlSchema::Flags f = 0,
                   const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Sphere >
      parseSphere (::xercesc::InputSource& is,
                   ::flexisip::Xsd::XmlSchema::Flags f = 0,
                   const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Sphere >
      parseSphere (::xercesc::InputSource& is,
                   ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                   ::flexisip::Xsd::XmlSchema::Flags f = 0,
                   const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Sphere >
      parseSphere (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::flexisip::Xsd::XmlSchema::Flags f = 0,
                   const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Sphere >
      parseSphere (const ::xercesc::DOMDocument& d,
                   ::flexisip::Xsd::XmlSchema::Flags f = 0,
                   const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::Sphere >
      parseSphere (::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::flexisip::Xsd::XmlSchema::Flags f = 0,
                   const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::StatusIcon >
      parseStatusIcon (const ::std::string& uri,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::StatusIcon >
      parseStatusIcon (const ::std::string& uri,
                       ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::StatusIcon >
      parseStatusIcon (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::StatusIcon >
      parseStatusIcon (::std::istream& is,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::StatusIcon >
      parseStatusIcon (::std::istream& is,
                       ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::StatusIcon >
      parseStatusIcon (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::StatusIcon >
      parseStatusIcon (::std::istream& is,
                       const ::std::string& id,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::StatusIcon >
      parseStatusIcon (::std::istream& is,
                       const ::std::string& id,
                       ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::StatusIcon >
      parseStatusIcon (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::StatusIcon >
      parseStatusIcon (::xercesc::InputSource& is,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::StatusIcon >
      parseStatusIcon (::xercesc::InputSource& is,
                       ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::StatusIcon >
      parseStatusIcon (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::StatusIcon >
      parseStatusIcon (const ::xercesc::DOMDocument& d,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::StatusIcon >
      parseStatusIcon (::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::TimeOffset >
      parseTimeOffset (const ::std::string& uri,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::TimeOffset >
      parseTimeOffset (const ::std::string& uri,
                       ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::TimeOffset >
      parseTimeOffset (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::TimeOffset >
      parseTimeOffset (::std::istream& is,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::TimeOffset >
      parseTimeOffset (::std::istream& is,
                       ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::TimeOffset >
      parseTimeOffset (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::TimeOffset >
      parseTimeOffset (::std::istream& is,
                       const ::std::string& id,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::TimeOffset >
      parseTimeOffset (::std::istream& is,
                       const ::std::string& id,
                       ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::TimeOffset >
      parseTimeOffset (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::TimeOffset >
      parseTimeOffset (::xercesc::InputSource& is,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::TimeOffset >
      parseTimeOffset (::xercesc::InputSource& is,
                       ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::TimeOffset >
      parseTimeOffset (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::TimeOffset >
      parseTimeOffset (const ::xercesc::DOMDocument& d,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::TimeOffset >
      parseTimeOffset (::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0,
                       const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::UserInput >
      parseUserInput (const ::std::string& uri,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::UserInput >
      parseUserInput (const ::std::string& uri,
                      ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::UserInput >
      parseUserInput (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::UserInput >
      parseUserInput (::std::istream& is,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::UserInput >
      parseUserInput (::std::istream& is,
                      ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::UserInput >
      parseUserInput (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::UserInput >
      parseUserInput (::std::istream& is,
                      const ::std::string& id,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::UserInput >
      parseUserInput (::std::istream& is,
                      const ::std::string& id,
                      ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::UserInput >
      parseUserInput (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::UserInput >
      parseUserInput (::xercesc::InputSource& is,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::UserInput >
      parseUserInput (::xercesc::InputSource& is,
                      ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::UserInput >
      parseUserInput (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::UserInput >
      parseUserInput (const ::xercesc::DOMDocument& d,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());

      ::std::unique_ptr< ::flexisip::Xsd::Rpid::UserInput >
      parseUserInput (::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0,
                      const ::flexisip::Xsd::XmlSchema::Properties& p = ::flexisip::Xsd::XmlSchema::Properties ());
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace flexisip
{
  namespace Xsd
  {
    namespace Rpid
    {
      void
      operator<< (::xercesc::DOMElement&, const Timestamp_t&);

      void
      operator<< (::xercesc::DOMAttr&, const Timestamp_t&);

      void
      operator<< (::flexisip::Xsd::XmlSchema::ListStream&,
                  const Timestamp_t&);

      void
      operator<< (::xercesc::DOMElement&, const DeviceID_t&);

      void
      operator<< (::xercesc::DOMAttr&, const DeviceID_t&);

      void
      operator<< (::flexisip::Xsd::XmlSchema::ListStream&,
                  const DeviceID_t&);

      void
      operator<< (::xercesc::DOMElement&, const Note_t&);

      void
      operator<< (::xercesc::DOMElement&, const Empty&);

      void
      operator<< (::xercesc::DOMAttr&, const Empty&);

      void
      operator<< (::flexisip::Xsd::XmlSchema::ListStream&,
                  const Empty&);
    }
  }
}

namespace flexisip
{
  namespace Xsd
  {
    namespace Rpid
    {
      void
      operator<< (::xercesc::DOMElement&, const ActiveIdle&);

      void
      operator<< (::xercesc::DOMAttr&, const ActiveIdle&);

      void
      operator<< (::flexisip::Xsd::XmlSchema::ListStream&,
                  const ActiveIdle&);

      // Serialize to std::ostream.
      //

      void
      serializeActivities (::std::ostream& os,
                           const ::flexisip::Xsd::Rpid::Activities& x, 
                           const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeActivities (::std::ostream& os,
                           const ::flexisip::Xsd::Rpid::Activities& x, 
                           ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                           const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeActivities (::std::ostream& os,
                           const ::flexisip::Xsd::Rpid::Activities& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      serializeActivities (::xercesc::XMLFormatTarget& ft,
                           const ::flexisip::Xsd::Rpid::Activities& x, 
                           const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeActivities (::xercesc::XMLFormatTarget& ft,
                           const ::flexisip::Xsd::Rpid::Activities& x, 
                           ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                           const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeActivities (::xercesc::XMLFormatTarget& ft,
                           const ::flexisip::Xsd::Rpid::Activities& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      serializeActivities (::xercesc::DOMDocument& d,
                           const ::flexisip::Xsd::Rpid::Activities& x,
                           ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument >
      serializeActivities (const ::flexisip::Xsd::Rpid::Activities& x, 
                           const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                           ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to std::ostream.
      //

      void
      serializeClass (::std::ostream& os,
                      const ::flexisip::Xsd::XmlSchema::Token& x, 
                      const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeClass (::std::ostream& os,
                      const ::flexisip::Xsd::XmlSchema::Token& x, 
                      ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                      const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeClass (::std::ostream& os,
                      const ::flexisip::Xsd::XmlSchema::Token& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      serializeClass (::xercesc::XMLFormatTarget& ft,
                      const ::flexisip::Xsd::XmlSchema::Token& x, 
                      const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeClass (::xercesc::XMLFormatTarget& ft,
                      const ::flexisip::Xsd::XmlSchema::Token& x, 
                      ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                      const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeClass (::xercesc::XMLFormatTarget& ft,
                      const ::flexisip::Xsd::XmlSchema::Token& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      serializeClass (::xercesc::DOMDocument& d,
                      const ::flexisip::Xsd::XmlSchema::Token& x,
                      ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument >
      serializeClass (const ::flexisip::Xsd::XmlSchema::Token& x, 
                      const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                      ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to std::ostream.
      //

      void
      serializeMood (::std::ostream& os,
                     const ::flexisip::Xsd::Rpid::Mood& x, 
                     const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeMood (::std::ostream& os,
                     const ::flexisip::Xsd::Rpid::Mood& x, 
                     ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                     const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeMood (::std::ostream& os,
                     const ::flexisip::Xsd::Rpid::Mood& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      serializeMood (::xercesc::XMLFormatTarget& ft,
                     const ::flexisip::Xsd::Rpid::Mood& x, 
                     const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeMood (::xercesc::XMLFormatTarget& ft,
                     const ::flexisip::Xsd::Rpid::Mood& x, 
                     ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                     const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeMood (::xercesc::XMLFormatTarget& ft,
                     const ::flexisip::Xsd::Rpid::Mood& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      serializeMood (::xercesc::DOMDocument& d,
                     const ::flexisip::Xsd::Rpid::Mood& x,
                     ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument >
      serializeMood (const ::flexisip::Xsd::Rpid::Mood& x, 
                     const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                     ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to std::ostream.
      //

      void
      serializePlaceIs (::std::ostream& os,
                        const ::flexisip::Xsd::Rpid::PlaceIs& x, 
                        const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializePlaceIs (::std::ostream& os,
                        const ::flexisip::Xsd::Rpid::PlaceIs& x, 
                        ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                        const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializePlaceIs (::std::ostream& os,
                        const ::flexisip::Xsd::Rpid::PlaceIs& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      serializePlaceIs (::xercesc::XMLFormatTarget& ft,
                        const ::flexisip::Xsd::Rpid::PlaceIs& x, 
                        const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializePlaceIs (::xercesc::XMLFormatTarget& ft,
                        const ::flexisip::Xsd::Rpid::PlaceIs& x, 
                        ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                        const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializePlaceIs (::xercesc::XMLFormatTarget& ft,
                        const ::flexisip::Xsd::Rpid::PlaceIs& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      serializePlaceIs (::xercesc::DOMDocument& d,
                        const ::flexisip::Xsd::Rpid::PlaceIs& x,
                        ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument >
      serializePlaceIs (const ::flexisip::Xsd::Rpid::PlaceIs& x, 
                        const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                        ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to std::ostream.
      //

      void
      serializePlaceType (::std::ostream& os,
                          const ::flexisip::Xsd::Rpid::PlaceType& x, 
                          const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializePlaceType (::std::ostream& os,
                          const ::flexisip::Xsd::Rpid::PlaceType& x, 
                          ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                          const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializePlaceType (::std::ostream& os,
                          const ::flexisip::Xsd::Rpid::PlaceType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      serializePlaceType (::xercesc::XMLFormatTarget& ft,
                          const ::flexisip::Xsd::Rpid::PlaceType& x, 
                          const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializePlaceType (::xercesc::XMLFormatTarget& ft,
                          const ::flexisip::Xsd::Rpid::PlaceType& x, 
                          ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                          const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializePlaceType (::xercesc::XMLFormatTarget& ft,
                          const ::flexisip::Xsd::Rpid::PlaceType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      serializePlaceType (::xercesc::DOMDocument& d,
                          const ::flexisip::Xsd::Rpid::PlaceType& x,
                          ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument >
      serializePlaceType (const ::flexisip::Xsd::Rpid::PlaceType& x, 
                          const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                          ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to std::ostream.
      //

      void
      serializePrivacy (::std::ostream& os,
                        const ::flexisip::Xsd::Rpid::Privacy& x, 
                        const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializePrivacy (::std::ostream& os,
                        const ::flexisip::Xsd::Rpid::Privacy& x, 
                        ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                        const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializePrivacy (::std::ostream& os,
                        const ::flexisip::Xsd::Rpid::Privacy& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      serializePrivacy (::xercesc::XMLFormatTarget& ft,
                        const ::flexisip::Xsd::Rpid::Privacy& x, 
                        const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializePrivacy (::xercesc::XMLFormatTarget& ft,
                        const ::flexisip::Xsd::Rpid::Privacy& x, 
                        ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                        const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializePrivacy (::xercesc::XMLFormatTarget& ft,
                        const ::flexisip::Xsd::Rpid::Privacy& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      serializePrivacy (::xercesc::DOMDocument& d,
                        const ::flexisip::Xsd::Rpid::Privacy& x,
                        ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument >
      serializePrivacy (const ::flexisip::Xsd::Rpid::Privacy& x, 
                        const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                        ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to std::ostream.
      //

      void
      serializeRelationship (::std::ostream& os,
                             const ::flexisip::Xsd::Rpid::Relationship& x, 
                             const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeRelationship (::std::ostream& os,
                             const ::flexisip::Xsd::Rpid::Relationship& x, 
                             ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                             const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeRelationship (::std::ostream& os,
                             const ::flexisip::Xsd::Rpid::Relationship& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      serializeRelationship (::xercesc::XMLFormatTarget& ft,
                             const ::flexisip::Xsd::Rpid::Relationship& x, 
                             const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeRelationship (::xercesc::XMLFormatTarget& ft,
                             const ::flexisip::Xsd::Rpid::Relationship& x, 
                             ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                             const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeRelationship (::xercesc::XMLFormatTarget& ft,
                             const ::flexisip::Xsd::Rpid::Relationship& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      serializeRelationship (::xercesc::DOMDocument& d,
                             const ::flexisip::Xsd::Rpid::Relationship& x,
                             ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument >
      serializeRelationship (const ::flexisip::Xsd::Rpid::Relationship& x, 
                             const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                             ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to std::ostream.
      //

      void
      serializeServiceClass (::std::ostream& os,
                             const ::flexisip::Xsd::Rpid::ServiceClass& x, 
                             const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeServiceClass (::std::ostream& os,
                             const ::flexisip::Xsd::Rpid::ServiceClass& x, 
                             ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                             const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeServiceClass (::std::ostream& os,
                             const ::flexisip::Xsd::Rpid::ServiceClass& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      serializeServiceClass (::xercesc::XMLFormatTarget& ft,
                             const ::flexisip::Xsd::Rpid::ServiceClass& x, 
                             const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeServiceClass (::xercesc::XMLFormatTarget& ft,
                             const ::flexisip::Xsd::Rpid::ServiceClass& x, 
                             ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                             const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeServiceClass (::xercesc::XMLFormatTarget& ft,
                             const ::flexisip::Xsd::Rpid::ServiceClass& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      serializeServiceClass (::xercesc::DOMDocument& d,
                             const ::flexisip::Xsd::Rpid::ServiceClass& x,
                             ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument >
      serializeServiceClass (const ::flexisip::Xsd::Rpid::ServiceClass& x, 
                             const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                             ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to std::ostream.
      //

      void
      serializeSphere (::std::ostream& os,
                       const ::flexisip::Xsd::Rpid::Sphere& x, 
                       const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeSphere (::std::ostream& os,
                       const ::flexisip::Xsd::Rpid::Sphere& x, 
                       ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                       const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeSphere (::std::ostream& os,
                       const ::flexisip::Xsd::Rpid::Sphere& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      serializeSphere (::xercesc::XMLFormatTarget& ft,
                       const ::flexisip::Xsd::Rpid::Sphere& x, 
                       const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeSphere (::xercesc::XMLFormatTarget& ft,
                       const ::flexisip::Xsd::Rpid::Sphere& x, 
                       ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                       const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeSphere (::xercesc::XMLFormatTarget& ft,
                       const ::flexisip::Xsd::Rpid::Sphere& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      serializeSphere (::xercesc::DOMDocument& d,
                       const ::flexisip::Xsd::Rpid::Sphere& x,
                       ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument >
      serializeSphere (const ::flexisip::Xsd::Rpid::Sphere& x, 
                       const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                       ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to std::ostream.
      //

      void
      serializeStatusIcon (::std::ostream& os,
                           const ::flexisip::Xsd::Rpid::StatusIcon& x, 
                           const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeStatusIcon (::std::ostream& os,
                           const ::flexisip::Xsd::Rpid::StatusIcon& x, 
                           ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                           const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeStatusIcon (::std::ostream& os,
                           const ::flexisip::Xsd::Rpid::StatusIcon& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      serializeStatusIcon (::xercesc::XMLFormatTarget& ft,
                           const ::flexisip::Xsd::Rpid::StatusIcon& x, 
                           const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeStatusIcon (::xercesc::XMLFormatTarget& ft,
                           const ::flexisip::Xsd::Rpid::StatusIcon& x, 
                           ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                           const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeStatusIcon (::xercesc::XMLFormatTarget& ft,
                           const ::flexisip::Xsd::Rpid::StatusIcon& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      serializeStatusIcon (::xercesc::DOMDocument& d,
                           const ::flexisip::Xsd::Rpid::StatusIcon& x,
                           ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument >
      serializeStatusIcon (const ::flexisip::Xsd::Rpid::StatusIcon& x, 
                           const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                           ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to std::ostream.
      //

      void
      serializeTimeOffset (::std::ostream& os,
                           const ::flexisip::Xsd::Rpid::TimeOffset& x, 
                           const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeTimeOffset (::std::ostream& os,
                           const ::flexisip::Xsd::Rpid::TimeOffset& x, 
                           ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                           const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeTimeOffset (::std::ostream& os,
                           const ::flexisip::Xsd::Rpid::TimeOffset& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      serializeTimeOffset (::xercesc::XMLFormatTarget& ft,
                           const ::flexisip::Xsd::Rpid::TimeOffset& x, 
                           const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeTimeOffset (::xercesc::XMLFormatTarget& ft,
                           const ::flexisip::Xsd::Rpid::TimeOffset& x, 
                           ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                           const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeTimeOffset (::xercesc::XMLFormatTarget& ft,
                           const ::flexisip::Xsd::Rpid::TimeOffset& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      serializeTimeOffset (::xercesc::DOMDocument& d,
                           const ::flexisip::Xsd::Rpid::TimeOffset& x,
                           ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument >
      serializeTimeOffset (const ::flexisip::Xsd::Rpid::TimeOffset& x, 
                           const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                           ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to std::ostream.
      //

      void
      serializeUserInput (::std::ostream& os,
                          const ::flexisip::Xsd::Rpid::UserInput& x, 
                          const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeUserInput (::std::ostream& os,
                          const ::flexisip::Xsd::Rpid::UserInput& x, 
                          ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                          const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeUserInput (::std::ostream& os,
                          const ::flexisip::Xsd::Rpid::UserInput& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      serializeUserInput (::xercesc::XMLFormatTarget& ft,
                          const ::flexisip::Xsd::Rpid::UserInput& x, 
                          const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeUserInput (::xercesc::XMLFormatTarget& ft,
                          const ::flexisip::Xsd::Rpid::UserInput& x, 
                          ::flexisip::Xsd::XmlSchema::ErrorHandler& eh,
                          const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      serializeUserInput (::xercesc::XMLFormatTarget& ft,
                          const ::flexisip::Xsd::Rpid::UserInput& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      serializeUserInput (::xercesc::DOMDocument& d,
                          const ::flexisip::Xsd::Rpid::UserInput& x,
                          ::flexisip::Xsd::XmlSchema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::flexisip::Xsd::XmlSchema::dom::unique_ptr< ::xercesc::DOMDocument >
      serializeUserInput (const ::flexisip::Xsd::Rpid::UserInput& x, 
                          const ::flexisip::Xsd::XmlSchema::NamespaceInfomap& m = ::flexisip::Xsd::XmlSchema::NamespaceInfomap (),
                          ::flexisip::Xsd::XmlSchema::Flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const Activities&);

      void
      operator<< (::xercesc::DOMElement&, const Mood&);

      void
      operator<< (::xercesc::DOMElement&, const PlaceIs&);

      void
      operator<< (::xercesc::DOMElement&, const PlaceType&);

      void
      operator<< (::xercesc::DOMElement&, const Privacy&);

      void
      operator<< (::xercesc::DOMElement&, const Relationship&);

      void
      operator<< (::xercesc::DOMElement&, const ServiceClass&);

      void
      operator<< (::xercesc::DOMElement&, const Sphere&);

      void
      operator<< (::xercesc::DOMElement&, const StatusIcon&);

      void
      operator<< (::xercesc::DOMElement&, const TimeOffset&);

      void
      operator<< (::xercesc::DOMElement&, const UserInput&);

      void
      operator<< (::xercesc::DOMElement&, const Audio&);

      void
      operator<< (::xercesc::DOMElement&, const Video&);

      void
      operator<< (::xercesc::DOMElement&, const Text&);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
#if __clang__ || __GNUC__ >= 4
	#pragma GCC diagnostic pop
#endif
//
// End epilogue.

#endif // XML_RPID_HH
