#################################################
# Global
#################################################

.set-max-jobs: &set-max-jobs
  - |
    case "$CMAKE_GENERATOR" in
      'Unix Makefiles')
        export CMAKE_BUILD_PARALLEL_LEVEL=$MAKEFILE_JOBS ;;
      'Ninja')
        export CMAKE_BUILD_PARALLEL_LEVEL=$NINJA_JOBS ;;
      *)
        export CMAKE_BUILD_PARALLEL_LEVEL=1 ;;
    esac
    echo "CMAKE_BUILD_PARALLEL_LEVEL='$CMAKE_BUILD_PARALLEL_LEVEL'"


.linux-ccache:
  cache:
    key: $CI_JOB_NAME
    paths:
      - ccache/
  before_script:
    - git submodule foreach --recursive git fetch --tags --force
    - "[[ -f /opt/rh/devtoolset-8/enable ]] && source /opt/rh/devtoolset-8/enable"
    - mkdir -p ccache
    - echo "max_size = $CCACHE_SIZE" > ccache/ccache.conf
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
    - ccache -s
  after_script:
    - export CCACHE_DIR=${PWD}/ccache
    - ccache -s


.job-linux-build:
  stage: build üèó
  tags: [ "docker" ]
  extends: .linux-ccache
  script:
    - *set-max-jobs
    - mkdir work && cd work
    - cmake -G "$CMAKE_GENERATOR" $DEFAULT_CMAKE_OPTIONS -DCMAKE_INSTALL_PREFIX="$PWD/../OUTPUT" $CMAKE_OPTIONS ..
    - cmake --build . --target install

# Files required by the flexisip_tester bin
.tester-artifacts:
  artifacts:
    paths:
      - OUTPUT/bin/flexisip_tester
      - OUTPUT/lib{,64}/
      - OUTPUT/share/flexisip-tester/
      - OUTPUT/share/belr/grammars/

#################################################
# RPM
#################################################

.job-linux-rpm:
  stage: package üì¶
  tags: [ "docker" ]
  extends:
    - .rules-default  # ‚ö† See `rules.yml`
  variables:
    CMAKE_GENERATOR: 'Ninja'
  script:
    - "[[ -f /opt/rh/devtoolset-8/enable ]] && source /opt/rh/devtoolset-8/enable"
    - *set-max-jobs
    - mkdir build && cd build
    - cmake -G $CMAKE_GENERATOR $DEFAULT_PACKAGING_CMAKE_OPTIONS $CMAKE_OPTIONS -DCPACK_GENERATOR=RPM ..
    - cmake --build . --target package
  artifacts:
    paths:
      - build/*.rpm
      - .gitlab-ci-files/deploy.sh
    when: always
    expire_in: 1 week

.job-rpm-deploy:
  stage: deploy üöÄ
  tags: [ "deploy" ]
  extends: .rules-deploy  # ‚ö† See `rules.yml`
  variables:
    # Do not clone, only use artifacts (TODO 'none' doesn't clean, we are using 'fetch' until we find a way)
    GIT_STRATEGY: fetch
  script: ./.gitlab-ci-files/deploy.sh ${DISTRIB}

#################################################
# DEB
#################################################

.job-linux-deb:
  stage: package üì¶
  tags: [ "docker" ]
  extends:
    - .rules-default  # ‚ö† See `rules.yml`
  variables:
    CMAKE_GENERATOR: 'Ninja'
  script:
    - *set-max-jobs
    - mkdir build && cd build
    - cmake -G $CMAKE_GENERATOR $DEFAULT_PACKAGING_CMAKE_OPTIONS $CMAKE_OPTIONS -DCPACK_GENERATOR=DEB ..
    - cmake --build . --target package
  artifacts:
    paths:
      - build/*.deb
      - build/*.ddeb
    when: always
    expire_in: 1 week


.job-debian-deb-deploy:
  stage: deploy üöÄ
  tags: [ "deploy" ]
  extends: .rules-deploy  # ‚ö† See `rules.yml`
  variables:
    # Do not clone, only use artifacts (TODO 'none' doesn't clean, we are using 'fetch' until we find a way)
    GIT_STRATEGY: fetch
  script: ./.gitlab-ci-files/deploy.sh debian

#################################################
# DOCKER
#################################################

.job-flexisip-image-deploy:
  stage: image
  tags: [ "linux-deploy" ]
  extends: .rules-deploy  # ‚ö† See `rules.yml`
  script:
    - mkdir -p docker/DEBS && mv build/*.{deb,ddeb} docker/DEBS
    - cd docker
    - make flexisip-deb-build
    - make flexisip-deb-push

# Enable this to use tests-flexisip-mr
#docker-build-flexisip-src:
#  stage: build üèó
#  tags: [ "linux-nuc-build" ]
#  extends: .rules-dev  # ‚ö† See `rules.yml`
#  variables:
#    DOCKER_BUILD_OPTIONS: "--no-cache --force-rm -t flexisip-from-src:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA -f docker/flex-from-src --build-arg=njobs=12 --build-arg=build_type=RelWithDebInfo"
#  script:
#    - docker image ls
#    - echo $DOCKER_BUILD_OPTIONS
#    - docker build $DOCKER_BUILD_OPTIONS .
#    - docker image ls

#################################################
# Nightly only
#################################################

.job-linux-build-nightly:
  extends:
    - .job-linux-build
    - .rules-nightly  # ‚ö† See `rules.yml`

#################################################
# Build Makefile
#################################################

.job-makefile-gcc:
  extends: .job-linux-build-nightly
  variables:
    CMAKE_GENERATOR: Unix Makefiles
    CC: gcc
    CXX: g++


.job-makefile-clang:
  extends: .job-linux-build-nightly
  variables:
    CMAKE_GENERATOR: Unix Makefiles
    CC: clang
    CXX: clang++

#################################################
# Build Ninja
#################################################

.job-ninja-gcc:
  extends:
    - .job-linux-build
    - .rules-manual  # ‚ö† See `rules.yml`
  variables:
    CMAKE_GENERATOR: Ninja
    CC: gcc
    CXX: g++


.job-ninja-clang:
  extends:
    - .job-linux-build
    - .rules-dev  # ‚ö† See `rules.yml`
  variables:
    CMAKE_GENERATOR: Ninja
    CC: clang
    CXX: clang++

#################################################
# Tests
#################################################

.unit-test:
  stage: test üß™
  tags: [ "docker-test-flexisip" ]
  extends: .rules-dev  # ‚ö† See `rules.yml`
  variables:
    # Do not clone, only use artifacts (TODO 'none' doesn't clean, we are using 'fetch' until we find a way)
    GIT_STRATEGY: fetch
  script:
    - export LD_LIBRARY_PATH=/usr/local/lib
    - export LSAN_OPTIONS="suppressions=./sanitizer_ignore.txt"
    - ./OUTPUT/bin/flexisip_tester --verbose --resource-dir ./OUTPUT/share/flexisip-tester --xml || exit $?
  artifacts:
    reports:
      junit:
        - BCUnitAutomated-Results.xml
    when: always
    expire_in: 1 week

# Disabled because of too much random test errors for a valid result for now.
#
# tests-flexisip-mr:
#   stage: test üß™
#   tags: [ "linux-nuc"]
#   allow_failure: true
#   extends: .rules-dev  # ‚ö† See `rules.yml`
#   needs :
#     - docker-build-flexisip-src
#   variables:
#     #Branch of the Flexisip-tester project to use. Could be modified to test fixes or features in the Flexisip-tester
#     FLEXISIP_TESTER_BRANCH: "release/flexisip_2.2"
# 
#     #This value specifies the workspace where we from all tests outputs.
#     workspace: "${CI_PROJECT_DIR}/liblinphone_tester_workspace"
# 
#     #Flexisip docker image is build from source in the build stage (job docker-build-flexisip-src)
#     #No need to modify these value
#     FLEXISIP_DOCKER_TAG: "$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA"
# 
#     # Docker run options are only used for coredump display if any
#     # We are forced to copy the same string as "workspace" because we can't use nested variables in the same place (i.e. in variable declaration)
#     docker_run_options: "-v ${CI_PROJECT_DIR}/liblinphone_tester_workspace:/home/bc/linphone-sdk-build/linphone-sdk/desktop/work"
#     flexisip_docker_run_options: "-v ${CI_PROJECT_DIR}/liblinphone_tester_workspace:/root"
# 
#   script:
#     # Retrieve the SDK commit sha used by Flexisip
#     - cd linphone-sdk
#     - export LIBLINPHONE_DOCKER_TAG=$(git rev-parse --verify HEAD)
#     - echo "SDK commit sha " $LIBLINPHONE_DOCKER_TAG
#     - cd ..
# 
#     # used to ensure there will be not network name conflict for parallel 
#     #   docker-compose executions
#     - export COMPOSE_PROJECT_NAME=$RANDOM
#     - echo "Compose project name " $COMPOSE_PROJECT_NAME
# 
#     - export FLEXISIP_TESTER_IPV4_PREFIX="172.0.`expr $COMPOSE_PROJECT_NAME % 255`"
#     - echo "Flexisip tester private ipv4 prefix " $FLEXISIP_TESTER_IPV4_PREFIX
# 
#     - export FLEXISIP_TESTER_IPV6_SUBNET="2001:3200:3200:`printf '%x\n' $COMPOSE_PROJECT_NAME`::/64"
#     - echo "Flexisip tester private ipv6 subnet " $FLEXISIP_TESTER_IPV6_SUBNET
# 
#     - export FLEXISIP_TESTER_IPV6_GATEWAY="2001:3200:3200:`printf '%x\n' $COMPOSE_PROJECT_NAME`::1"
#     - export FLEXISIP_TESTER_IPV6_PROBING_ADDR=$FLEXISIP_TESTER_IPV6_GATEWAY
#     - echo "Flexisip tester private ipv6 gateway" $FLEXISIP_TESTER_IPV6_GATEWAY
#     
#     - echo "Liblinphone tester version:" $LIBLINPHONE_DOCKER_TAG
#     - echo $workspace
# 
#     - git clone -b $FLEXISIP_TESTER_BRANCH --single-branch git@gitlab.linphone.org:BC/private/flexisip-tester --jobs 12
# 
#     #We make sure that the variables we set here can be accessed by the docker-compose scripts (in the flexisip-tester project).
#     - export FLEXISIP_DOCKER_TAG="$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA"
#     - export LIBLINPHONE_DOCKER_TAG=$LIBLINPHONE_DOCKER_TAG
# 
#     - |
#         if [ -z $workspace ]; then
#         echo "Error, $workspace should be set. Aborting to avoid unwanted rm"
#         exit 1
#         fi
# 
#     - mkdir -p $workspace
#     - rm -rf $workspace/*
# 
#     - mkdir -p $workspace/{bin,flexiapi,ext,lime,lime-ext}
# 
#     # workaround for logs writing
#     - chmod -R 777 $workspace
# 
#     # Handle multiple runs by unsetting variable
#     # Overriding docker-compose.yaml values with docker-compose-standalone.yaml
#     #   in the ways specified with docker docs (either OR or AND, depending on key)
# 
#     - |
#         docker_compose_options="--env-file ${CI_PROJECT_DIR}/flexisip-tester/docker/.env"
#         for name in 'docker-compose.yaml' 'docker-compose-standalone.yaml'; do
#         docker_compose_options="$docker_compose_options -f ${CI_PROJECT_DIR}/flexisip-tester/docker/$name"
#         done
# 
#     #Tester's options like parallel mode are defined in the docker-compose-standalone.yaml file of the flexisip-tester project
# 
#     - export FLEXISIP_LOGS="$workspace"
#     - export LIBLINPHONE_LOGS="$workspace"
# 
#     - export FLEXISIP_WORKSPACE="$workspace"
# 
#     - echo $docker_run_options
# 
#     - cd $workspace
# 
#     # Stop and remove containers, networks and volumes from previous tests.
#     # Already done after tests, should do nothing except if previous job crashed.
#     - docker-compose $docker_compose_options down --volumes --remove-orphans
# 
#     - echo "COMPOSE_PROJECT_NAME=$COMPOSE_PROJECT_NAME" > savedEnv
# 
#     # commented -d option to have debug logs on standard output in case of
#     #   buggy or silent log artifacts
#     # We output only liblinphone_tester on stdout
# 
#     #-V, --renew-anon-volumes   Recreate anonymous volumes instead of retrieving data from the previous containers.
#     #--exit-code-from Exits with the return code from the specified container (implies --abort-on-container-exit)
#     #In the grep we are searching only for the logs related to liblinphone_tester and docker build, so we remove output from all other services.
# 
#     - docker-compose $docker_compose_options up --build -V --exit-code-from liblinphone_tester |& tee logs_all | grep -vE 'redis_server[_-]1|flexisip[_-]1|flexisip-regevent[_-]1|flexisip-external[_-]1|flexisip-external-domain[_-]1|lime-server[_-]1|lime-server[_-]1|lime-external-server[_-]1|dbserver[_-]1|account-manager[_-]1|file-transfer-server[_-]1|http-proxy[_-]1|ldap-server[_-]1' || EXIT=$?
# 
#     #docker-compose log command isn't used anymore because of bad performance
#     #the logs were converted by docker in json format, then reconverted to txt, which is useless (doing this made the job last for 20-30 minutes for 9 minutes of tests)
# 
#     - |
#         for service in $(docker-compose $docker_compose_options ps --services); do
#           if [[ "${service}" == "flexisip" ]]; then
#             continue
#           fi
#           filename="${service}_stdout.log"
#           echo -n "Writting ${filename}..."
#           grep $service logs_all >> ${filename}.log
#           echo " done"
#         done
# 
#     #we wait for each grep to end before stopping containers
#     - wait
# 
#     # The sleep command was removed because we now wait for the db socket to open (in compose file) before launching tests
# 
#     # Stop and remove containers, networks and volumes from previous tests
#     - docker-compose $docker_compose_options down --volumes --remove-orphans || true
# 
#     - gzip *.log
# 
#     - gzip */*.log
# 
#     - exit $EXIT
# 
#   after_script:
# 
#     #content of $workspace (set like this because the variable can't be resolved here)
#     - cd ${CI_PROJECT_DIR}/liblinphone_tester_workspace
#     # we specify commands to launch for each coredump of liblinphone_tester
#     - echo "set debug-file-directory ../lib64" | tee gdb_options
#     - echo "thread apply all bt" | tee -a gdb_options
#     # searching for core files and if there are some, launch gdb on all of it
#     # xargs -L1 means that the command in argument will be executed for each
#     # line (core dump) found in find output
#     # The docker syntax is error proning : to override the entrypoint with
#     # args, we enter the entrypoint first, then the name of the image, then the
#     # args to the entrypoint command.
#     # "|| true " is used here to continue the script even if the find fails
#     - FIND_EXIT=0
#     - find . -type f -name "core.liblin*" | grep . || FIND_EXIT=$?
#     - echo $FIND_EXIT
#     - if [[ $FIND_EXIT = 0 ]]; then find . -type f -name "core.liblin*" | xargs -L1 docker run $docker_run_options --entrypoint gdb "$LIBLINPHONE_DOCKER_IMAGE:$LIBLINPHONE_DOCKER_TAG" ../bin/liblinphone_tester -x gdb_options; fi || true
#     - unset FIND_EXIT
#     # we specify commands to launch for each coredump of flexisip_tester
#     - echo "set debug-file-directory /opt/belledonne-communications/lib" | tee gdb_options
#     - echo "thread apply all bt" | tee -a gdb_options
#     - echo $flexisip_docker_run_options
#     - find . -type f -name "core.flexisip*"
#     - echo $FLEXISIP_DOCKER_IMAGE
#     - echo $FLEXISIP_DOCKER_TAG
#     - echo $flexisip_docker_run_options
#     - FIND_EXIT=0
#     - find . -type f -name "core.flexisip*" | grep . || FIND_EXIT=$?
#     - echo $FIND_EXIT
#     - if [[ $FIND_EXIT = 0 ]]; then find . -type f -name "core.flexisip*" | xargs -L1 docker run $flexisip_docker_run_options --entrypoint gdb "$FLEXISIP_DOCKER_IMAGE:$FLEXISIP_DOCKER_TAG" /opt/belledonne-communications/bin/flexisip -x gdb_options; fi || true
# 
#     # simplifing artifacts browsing
#     # Moving artifacts to ease browsing from web view
#     # initially, all the paths needed to be browsed entirely to see artifacts
#     # now there is only the folder "results" to check
#     - mkdir -p ${CI_PROJECT_DIR}/results/ext
#     - chmod 777 ${CI_PROJECT_DIR}/results
#     - cp -r BCUnitAutomated* ${CI_PROJECT_DIR}/results
#     - cp -r *.log.gz ${CI_PROJECT_DIR}/results
#     - cp -r ext/*.log* ${CI_PROJECT_DIR}/results/ext
# 
#     # Remove network (useful in case of crash or cancel), loading the random generated project name saved during execution
#     - source savedEnv
#     - docker network rm "$COMPOSE_PROJECT_NAME"_default "$COMPOSE_PROJECT_NAME"_flexisip_internal_private || true
# 
#   artifacts:
#     paths:
#       - results/*
#     when: always
#     reports:
#       junit:
#         - liblinphone_tester_workspace/BCUnitAutomated-Results.xml
#     expire_in: 4 week
