.linux-ccache:

  cache:
    key: $CI_JOB_NAME
    paths:
      - ccache/

  before_script:
    - mkdir -p ccache
    - echo "max_size = $CCACHE_SIZE" > ccache/ccache.conf
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
    - ccache -s

  after_script:
    - export CCACHE_DIR=${PWD}/ccache
    - ccache -s

.job-linux:

  stage: build
  extends: .linux-ccache

  script:
    - export CC=$CC
    - export CXX=$CXX
    - git submodule foreach --recursive git fetch --tags --force
    - ./prepare.py -G "$CMAKE_GENERATOR" -cc $DEFAULT_CMAKE_OPTIONS $CMAKE_OPTIONS
    - cmake --build WORK/flexisip/cmake -- $ADDITIONAL_BUILD_OPTIONS

#################################################
# RPM
#################################################

.job-linux-rpm:

  stage: package
  except:
    variables:
      - $DEPLOY_UBUNTU

  script:
    - sudo rpm -e `rpm -qa | grep "^bc-[^0-9]"` || true
    - ./prepare.py flexisip-rpm $DEFAULT_CMAKE_OPTIONS $CMAKE_OPTIONS
    - cmake --build WORK/flexisip-rpm/cmake -- $ADDITIONAL_BUILD_OPTIONS

  artifacts:
    paths:
      - WORK/flexisip-rpm/rpmbuild/RPMS/x86_64/*.rpm
    when: always
    expire_in: 1 week

#################################################
# DEB
#################################################

.job-linux-deb:

  stage: package

  script:
    - sudo apt-get -y remove `dpkg-query -f '${binary:Package}\n' -W | grep "^bc-"` || true
    - ./prepare.py flexisip-rpm $DEFAULT_CMAKE_OPTIONS $CMAKE_OPTIONS
    - make

  artifacts:
    paths:
      - WORK/flexisip-rpm/rpmbuild/DEBS/*.deb
    when: always
    expire_in: 1 week

.job-deploy:
  before_script:
    - git submodule foreach --recursive git fetch --tags --force
  only:
    refs:
      - master
      - /release/.*/
    variables: [$SCHEDULE_RUN]

.job-debian-deb-deploy:

  stage: deploy
  tags: [ "deploy" ]

  extends: .job-deploy

  script: ./.gitlab-ci-files/deploy.sh debian

#################################################
# DOCKER
#################################################

.job-flexisip-image-deploy:

  stage: image
  tags: [ "linux-deploy" ]
  except:
    variables:
      - $DEPLOY_RUN
      - $DEPLOY_UBUNTU
  only:
    - schedules

  before_script:
    - git submodule foreach --recursive git fetch --tags --force

  script:
    - mv WORK/flexisip-rpm/rpmbuild/DEBS docker/DEBS
    - cd docker
    - make flexisip-deb-build
    - make flexisip-deb-push

docker-build-flexisip-src:

  stage: build
  tags: [ "linux-nuc-build" ]
  except:
    variables:
      - $DEPLOY_RUN
      - $DEPLOY_UBUNTU
  variables:
    DOCKER_BUILD_OPTIONS: "--no-cache --force-rm -t gitlab.linphone.org:4567/bc/public/flexisip/flexisip-from-src:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA -f docker/flex-from-src --build-arg=njobs=12 --build-arg=sanitizer=ON"
  script:
    - docker image ls
    - echo $DOCKER_BUILD_OPTIONS
    - docker build $DOCKER_BUILD_OPTIONS .
    - docker image ls

#################################################
# Schedule
#################################################

.scheduled-job-linux:

  extends: .job-linux
  only:
    variables:
      - $NIGHTLY_MASTER
      - $NIGHTLY_RELEASE

#################################################
# Tests
#################################################

tests-flexisip-mr:
  stage: test
  tags: [ "linux-nuc"]
  allow_failure: true
  except:
    variables:
      - $DEPLOY_RUN
      - $DEPLOY_UBUNTU

  variables:
    #No need to modify
    LIBLINPHONE_DOCKER_IMAGE: liblinphone_tester_for_flexisip

    #You can set here the version you want for Flexisip auxiliaries and liblinphone (branches with '/' are not supported yet since it is set as a docker tag).
    #/!\ if you work with Lime-server, account-manager or file-transfer server dev packages, you MUST ensure that these packages are available in one of the BC snapshot repositories. Otherwize the docker images won't use the latest versions.
    #You can use the latest version available of Lime-server, account-manager, file-transfer-server with the version number "latest"
    #/!\ In this case, there MUST be NO image with the same name on the nuc, otherwize the docker images won't be rebuilt
    LIBLINPHONE_DOCKER_TAG: "4.5.0-beta-11-gf6527ae"
    LIME_SERVER_VERSION: "1.0-27.el7"
    ACCOUNT_MANAGER_VERSION: "1.1.0-36.el7"
    FILE_TRANSFER_SERVER_VERSION: "1.0-5.el7"

    #Branch of the Flexisip-tester project to use. Could be modified to test fixes or features in the Flexisip-tester
    FLEXISIP_TESTER_BRANCH: "release/flexisip_2.1"

    #This value specifies the workspace where we from all tests outputs.
    workspace: "${CI_PROJECT_DIR}/liblinphone_tester_workspace"

    #Flexisip docker image is build from source in the build stage (job docker-build-flexisip-src)
    #No need to modify these values
    FLEXISIP_DOCKER_IMAGE: "gitlab.linphone.org:4567/bc/public/flexisip/flexisip-from-src"
    FLEXISIP_DOCKER_TAG: "$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA"

    # Docker run options are only used for coredump display if any
    # We are forced to copy the same string as "workspace" because we can't use nested variables in the same place (i.e. in variable declaration)
    docker_run_options: "-v ${CI_PROJECT_DIR}/liblinphone_tester_workspace:/home/bc/linphone-sdk-build/linphone-sdk/desktop/work"
    flexisip_docker_run_options: "-v ${CI_PROJECT_DIR}/liblinphone_tester_workspace:/root"

  script:

    - docker image ls
    # used to ensure there will be not network name conflict for parallel 
    #   docker-compose executions
    - export COMPOSE_PROJECT_NAME=$RANDOM
    - echo "Compose project name " $COMPOSE_PROJECT_NAME

    - export FLEXISIP_TESTER_IPV4_PREFIX="172.0.`expr $COMPOSE_PROJECT_NAME % 255`"
    - echo "Flexisip tester private ipv4 prefix " $FLEXISIP_TESTER_IPV4_PREFIX

    - export FLEXISIP_TESTER_IPV6_SUBNET="2001:3200:3200:`printf '%x\n' $COMPOSE_PROJECT_NAME`::/64"
    - echo "Flexisip tester private ipv6 subnet " $FLEXISIP_TESTER_IPV6_SUBNET

    - export FLEXISIP_TESTER_IPV6_GATEWAY="2001:3200:3200:`printf '%x\n' $COMPOSE_PROJECT_NAME`::1"
    - export FLEXISIP_TESTER_IPV6_PROBING_ADDR=$FLEXISIP_TESTER_IPV6_GATEWAY
    - echo "Flexisip tester private ipv6 gateway" $FLEXISIP_TESTER_IPV6_GATEWAY
    
    - echo "Liblinphone tester version:" $LIBLINPHONE_DOCKER_TAG
    - echo $workspace

    - git clone -b $FLEXISIP_TESTER_BRANCH --single-branch git@gitlab.linphone.org:BC/private/flexisip-tester --jobs 12

    #We make sure that the variables we set here can be accessed by the docker-compose scripts (in the flexisip-tester project).

    - export FLEXISIP_DOCKER_IMAGE="$FLEXISIP_DOCKER_IMAGE"
    - export FLEXISIP_DOCKER_TAG="$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA"
    - export LIBLINPHONE_DOCKER_IMAGE=$LIBLINPHONE_DOCKER_IMAGE
    - export LIBLINPHONE_DOCKER_TAG=$LIBLINPHONE_DOCKER_TAG
    - export LIME_SERVER_VERSION="$LIME_SERVER_VERSION"
    - export ACCOUNT_MANAGER_VERSION="$ACCOUNT_MANAGER_VERSION"
    - export FILE_TRANSFER_SERVER_VERSION="$FILE_TRANSFER_SERVER_VERSION"

    - |
        if [ -z $workspace ]; then
        echo "Error, $workspace should be set. Aborting to avoid unwanted rm"
        exit 1
        fi

    - mkdir -p $workspace
    - rm -rf $workspace/*

    - mkdir -p $workspace/{bin,ext,lime-server-apache}

    # workaround for logs writing (apache chown for lime-server)
    - sudo chown apache:apache $workspace
    - sudo chmod -R 777 $workspace

    # Handle multiple runs by unsetting variable
    # Overriding docker-compose.yaml values with docker-compose-standalone.yaml
    #   in the ways specified with docker docs (either OR or AND, depending on key)

    - |
        docker_compose_options='--env-file /dev/null'
        for name in 'docker-compose.yaml' 'docker-compose-standalone.yaml'; do
        docker_compose_options="$docker_compose_options -f ${CI_PROJECT_DIR}/flexisip-tester/docker/$name"
        done

    #Tester's options like parallel mode are defined in the docker-compose-standalone.yaml file of the flexisip-tester project

    - export FLEXISIP_LOGS="$workspace"
    - export LIBLINPHONE_LOGS="$workspace"

    - export FLEXISIP_WORKSPACE="$workspace"

    - echo $docker_run_options

    - cd $workspace

    - docker-compose $docker_compose_options down
    - |
        if [ "$REBUILD_FLEXISIP_AUXILIARIES" = "true" ]; then
        docker-compose $docker_compose_options build
        fi

    # commented -d option to have debug logs on standard output in case of
    #   buggy or silent log artifacts
    # We output only liblinphone_tester on stdout

    #-V, --renew-anon-volumes   Recreate anonymous volumes instead of retrieving data from the previous containers.
    #--exit-code-from Exits with the return code from the specified container (implies --abort-on-container-exit)
    #In the grep we are searching only for the logs related to liblinphone_tester and docker build, so we remove output from all other services.

    - docker-compose $docker_compose_options up -V --exit-code-from liblinphone_tester |& tee logs_all | grep -v 'redis_server_1\|flexisip_1\|flexisip-regevent_1\|flexisip-external_1\|flexisip-external-domain_1\|lime-server_1\|lime-external-server\|dbserver_1\|account-manager_1\|file-transfer-server_1\|http-proxy_1' || EXIT=$?

    #docker-compose log command isn't used anymore because of bad performance
    #the logs were converted by docker in json format, then reconverted to txt, which is useless (doing this made the job last for 20-30 minutes for 9 minutes of tests)

    - |
        for service in $(docker-compose $docker_compose_options ps --services); do
        echo $service &
        grep $service logs_all >> ${service}_stdout.log &
        echo "grep $service logs_all" &
        done

    #we wait for each grep to end before stopping containers
    - wait

    # The sleep command was removed because we now wait for the db socket to open (in compose file) before launching tests

    - docker-compose $docker_compose_options stop

    - gzip *.log

    - gzip */*.log

    - tree

    - exit $EXIT

  after_script:


    - docker image ls

    #content of $workspace (set like this because the variable can't be resolved here)
    - cd ${CI_PROJECT_DIR}/liblinphone_tester_workspace
    # we specify commands to launch for each coredump of liblinphone_tester
    - echo "set debug-file-directory ../lib64" | tee gdb_options
    - echo "thread apply all bt" | tee -a gdb_options
    # searching for core files and if there are some, launch gdb on all of it
    # xargs -L1 means that the command in argument will be executed for each
    # line (core dump) found in find output
    # The docker syntax is error proning : to override the entrypoint with
    # args, we enter the entrypoint first, then the name of the image, then the
    # args to the entrypoint command.
    # "|| true " is used here to continue the script even if the find fails
    - FIND_EXIT=0
    - find . -type f -name "core.liblin*" | grep . || FIND_EXIT=$?
    - echo $FIND_EXIT
    - if [[ $FIND_EXIT = 0 ]]; then find . -type f -name "core.liblin*" | xargs -L1 docker run $docker_run_options --entrypoint gdb "$LIBLINPHONE_DOCKER_IMAGE:$LIBLINPHONE_DOCKER_TAG" ../bin/liblinphone_tester -x gdb_options; fi || true
    - unset FIND_EXIT
    # we specify commands to launch for each coredump of flexisip_tester
    - echo "set debug-file-directory /opt/belledonne-communications/lib" | tee gdb_options
    - echo "thread apply all bt" | tee -a gdb_options
    - echo $flexisip_docker_run_options
    - find . -type f -name "core.flexisip*"
    - echo $FLEXISIP_DOCKER_IMAGE
    - echo $FLEXISIP_DOCKER_TAG
    - echo $flexisip_docker_run_options
    - FIND_EXIT=0
    - find . -type f -name "core.flexisip*" | grep . || FIND_EXIT=$?
    - echo $FIND_EXIT
    - if [[ $FIND_EXIT = 0 ]]; then find . -type f -name "core.flexisip*" | xargs -L1 docker run $flexisip_docker_run_options --entrypoint gdb "$FLEXISIP_DOCKER_IMAGE:$FLEXISIP_DOCKER_TAG" /opt/belledonne-communications/bin/flexisip -x gdb_options; fi || true

    # simplifing artifacts browsing
    # Moving artifacts to ease browsing from web view
    # initially, all the paths needed to be browsed entirely to see artifacts
    # now there is only the folder "results" to check
    - mkdir -p ${CI_PROJECT_DIR}/results/ext
    - chmod 777 ${CI_PROJECT_DIR}/results
    - cp -r BCUnitAutomated* ${CI_PROJECT_DIR}/results
    - cp -r *.log.gz ${CI_PROJECT_DIR}/results
    - cp -r ext/*.log* ${CI_PROJECT_DIR}/results/ext

  artifacts:
    paths:
      - results/*
    when: always
    reports:
      junit:
        - liblinphone_tester_workspace/BCUnitAutomated-Results.xml
    expire_in: 4 week
