// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#if __clang__ || __GNUC__ >= 4
	#pragma GCC diagnostic push
	#pragma GCC diagnostic ignored "-Wfloat-equal"
	#pragma GCC diagnostic ignored "-Wimplicit-fallthrough"
#ifndef __ANDROID__
	#pragma GCC diagnostic ignored "-Wsuggest-override"
#endif
#endif
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "common-schema.hh"

// Timestamp_t
// 


// DeviceID_t
// 


// Note_t
// 

const Note_t::LangOptional& Note_t::
getLang () const
{
  return this->lang_;
}

Note_t::LangOptional& Note_t::
getLang ()
{
  return this->lang_;
}

void Note_t::
setLang (const LangType& x)
{
  this->lang_.set (x);
}

void Note_t::
setLang (const LangOptional& x)
{
  this->lang_ = x;
}

void Note_t::
setLang (::std::unique_ptr< LangType > x)
{
  this->lang_.set (std::move (x));
}


// Empty
// 


#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

// Timestamp_t
//

Timestamp_t::
Timestamp_t (const ::flexisip::Xsd::XmlSchema::DateTime& _xsd_DateTime_base)
: ::flexisip::Xsd::XmlSchema::DateTime (_xsd_DateTime_base)
{
}

Timestamp_t::
Timestamp_t (const Timestamp_t& x,
             ::flexisip::Xsd::XmlSchema::Flags f,
             ::flexisip::Xsd::XmlSchema::Container* c)
: ::flexisip::Xsd::XmlSchema::DateTime (x, f, c)
{
}

Timestamp_t::
Timestamp_t (const ::xercesc::DOMElement& e,
             ::flexisip::Xsd::XmlSchema::Flags f,
             ::flexisip::Xsd::XmlSchema::Container* c)
: ::flexisip::Xsd::XmlSchema::DateTime (e, f, c)
{
}

Timestamp_t::
Timestamp_t (const ::xercesc::DOMAttr& a,
             ::flexisip::Xsd::XmlSchema::Flags f,
             ::flexisip::Xsd::XmlSchema::Container* c)
: ::flexisip::Xsd::XmlSchema::DateTime (a, f, c)
{
}

Timestamp_t::
Timestamp_t (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::flexisip::Xsd::XmlSchema::Flags f,
             ::flexisip::Xsd::XmlSchema::Container* c)
: ::flexisip::Xsd::XmlSchema::DateTime (s, e, f, c)
{
}

Timestamp_t* Timestamp_t::
_clone (::flexisip::Xsd::XmlSchema::Flags f,
        ::flexisip::Xsd::XmlSchema::Container* c) const
{
  return new class Timestamp_t (*this, f, c);
}

Timestamp_t::
~Timestamp_t ()
{
}

// DeviceID_t
//

DeviceID_t::
DeviceID_t (const ::flexisip::Xsd::XmlSchema::Uri& _xsd_Uri_base)
: ::flexisip::Xsd::XmlSchema::Uri (_xsd_Uri_base)
{
}

DeviceID_t::
DeviceID_t (const DeviceID_t& x,
            ::flexisip::Xsd::XmlSchema::Flags f,
            ::flexisip::Xsd::XmlSchema::Container* c)
: ::flexisip::Xsd::XmlSchema::Uri (x, f, c)
{
}

DeviceID_t::
DeviceID_t (const ::xercesc::DOMElement& e,
            ::flexisip::Xsd::XmlSchema::Flags f,
            ::flexisip::Xsd::XmlSchema::Container* c)
: ::flexisip::Xsd::XmlSchema::Uri (e, f, c)
{
}

DeviceID_t::
DeviceID_t (const ::xercesc::DOMAttr& a,
            ::flexisip::Xsd::XmlSchema::Flags f,
            ::flexisip::Xsd::XmlSchema::Container* c)
: ::flexisip::Xsd::XmlSchema::Uri (a, f, c)
{
}

DeviceID_t::
DeviceID_t (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::flexisip::Xsd::XmlSchema::Flags f,
            ::flexisip::Xsd::XmlSchema::Container* c)
: ::flexisip::Xsd::XmlSchema::Uri (s, e, f, c)
{
}

DeviceID_t* DeviceID_t::
_clone (::flexisip::Xsd::XmlSchema::Flags f,
        ::flexisip::Xsd::XmlSchema::Container* c) const
{
  return new class DeviceID_t (*this, f, c);
}

DeviceID_t::
~DeviceID_t ()
{
}

// Note_t
//

Note_t::
Note_t ()
: ::flexisip::Xsd::XmlSchema::String (),
  lang_ (this)
{
}

Note_t::
Note_t (const char* _xsd_String_base)
: ::flexisip::Xsd::XmlSchema::String (_xsd_String_base),
  lang_ (this)
{
}

Note_t::
Note_t (const ::std::string& _xsd_String_base)
: ::flexisip::Xsd::XmlSchema::String (_xsd_String_base),
  lang_ (this)
{
}

Note_t::
Note_t (const ::flexisip::Xsd::XmlSchema::String& _xsd_String_base)
: ::flexisip::Xsd::XmlSchema::String (_xsd_String_base),
  lang_ (this)
{
}

Note_t::
Note_t (const Note_t& x,
        ::flexisip::Xsd::XmlSchema::Flags f,
        ::flexisip::Xsd::XmlSchema::Container* c)
: ::flexisip::Xsd::XmlSchema::String (x, f, c),
  lang_ (x.lang_, f, this)
{
}

Note_t::
Note_t (const ::xercesc::DOMElement& e,
        ::flexisip::Xsd::XmlSchema::Flags f,
        ::flexisip::Xsd::XmlSchema::Container* c)
: ::flexisip::Xsd::XmlSchema::String (e, f | ::flexisip::Xsd::XmlSchema::Flags::base, c),
  lang_ (this)
{
  if ((f & ::flexisip::Xsd::XmlSchema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void Note_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::flexisip::Xsd::XmlSchema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "lang" && n.namespace_ () == "http://www.w3.org/XML/1998/namespace")
    {
      this->lang_.set (LangTraits::create (i, f, this));
      continue;
    }
  }
}

Note_t* Note_t::
_clone (::flexisip::Xsd::XmlSchema::Flags f,
        ::flexisip::Xsd::XmlSchema::Container* c) const
{
  return new class Note_t (*this, f, c);
}

Note_t& Note_t::
operator= (const Note_t& x)
{
  if (this != &x)
  {
    static_cast< ::flexisip::Xsd::XmlSchema::String& > (*this) = x;
    this->lang_ = x.lang_;
  }

  return *this;
}

Note_t::
~Note_t ()
{
}

// Empty
//

Empty::
Empty ()
: ::flexisip::Xsd::XmlSchema::Type ()
{
}

Empty::
Empty (const Empty& x,
       ::flexisip::Xsd::XmlSchema::Flags f,
       ::flexisip::Xsd::XmlSchema::Container* c)
: ::flexisip::Xsd::XmlSchema::Type (x, f, c)
{
}

Empty::
Empty (const ::xercesc::DOMElement& e,
       ::flexisip::Xsd::XmlSchema::Flags f,
       ::flexisip::Xsd::XmlSchema::Container* c)
: ::flexisip::Xsd::XmlSchema::Type (e, f, c)
{
}

Empty::
Empty (const ::xercesc::DOMAttr& a,
       ::flexisip::Xsd::XmlSchema::Flags f,
       ::flexisip::Xsd::XmlSchema::Container* c)
: ::flexisip::Xsd::XmlSchema::Type (a, f, c)
{
}

Empty::
Empty (const ::std::string& s,
       const ::xercesc::DOMElement* e,
       ::flexisip::Xsd::XmlSchema::Flags f,
       ::flexisip::Xsd::XmlSchema::Container* c)
: ::flexisip::Xsd::XmlSchema::Type (s, e, f, c)
{
}

Empty* Empty::
_clone (::flexisip::Xsd::XmlSchema::Flags f,
        ::flexisip::Xsd::XmlSchema::Container* c) const
{
  return new class Empty (*this, f, c);
}

Empty::
~Empty ()
{
}

#include <ostream>

::std::ostream&
operator<< (::std::ostream& o, const Timestamp_t& i)
{
  o << static_cast< const ::flexisip::Xsd::XmlSchema::DateTime& > (i);

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const DeviceID_t& i)
{
  o << static_cast< const ::flexisip::Xsd::XmlSchema::Uri& > (i);

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const Note_t& i)
{
  o << static_cast< const ::flexisip::Xsd::XmlSchema::String& > (i);

  if (i.getLang ())
  {
    o << ::std::endl << "lang: " << *i.getLang ();
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const Empty&)
{
  return o;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const Timestamp_t& i)
{
  e << static_cast< const ::flexisip::Xsd::XmlSchema::DateTime& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const Timestamp_t& i)
{
  a << static_cast< const ::flexisip::Xsd::XmlSchema::DateTime& > (i);
}

void
operator<< (::flexisip::Xsd::XmlSchema::ListStream& l,
            const Timestamp_t& i)
{
  l << static_cast< const ::flexisip::Xsd::XmlSchema::DateTime& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const DeviceID_t& i)
{
  e << static_cast< const ::flexisip::Xsd::XmlSchema::Uri& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const DeviceID_t& i)
{
  a << static_cast< const ::flexisip::Xsd::XmlSchema::Uri& > (i);
}

void
operator<< (::flexisip::Xsd::XmlSchema::ListStream& l,
            const DeviceID_t& i)
{
  l << static_cast< const ::flexisip::Xsd::XmlSchema::Uri& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const Note_t& i)
{
  e << static_cast< const ::flexisip::Xsd::XmlSchema::String& > (i);

  // lang
  //
  if (i.getLang ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "lang",
        "http://www.w3.org/XML/1998/namespace",
        e));

    a << *i.getLang ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const Empty& i)
{
  e << static_cast< const ::flexisip::Xsd::XmlSchema::Type& > (i);
}

void
operator<< (::xercesc::DOMAttr&, const Empty&)
{
}

void
operator<< (::flexisip::Xsd::XmlSchema::ListStream&,
            const Empty&)
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
#if __clang__ || __GNUC__ >= 4
	#pragma GCC diagnostic pop
#endif
//
// End epilogue.

